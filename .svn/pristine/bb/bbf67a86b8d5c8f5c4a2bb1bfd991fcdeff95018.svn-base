package byit.tableausubscribe.tab.dao;


import java.io.File;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import org.apache.commons.io.FileUtils;
import org.apache.log4j.Logger;
import org.dom4j.Document;
import org.dom4j.Element;
import org.dom4j.io.SAXReader;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import byit.osdp.base.security.UserHolder;
import byit.tableausubscribe.common.util.Constants;
import byit.tableausubscribe.tab.bean.ExcelSubscribe;
import byit.tableausubscribe.tab.bean.ReportSubscribe;
import byit.tableausubscribe.tab.bean.SendExcelResult;
import byit.tableausubscribe.tab.db.DB;
import byit.tableausubscribe.tab.bean.SubscribeExcelType;
import byit.utils.Tools;


/** 
* Comments:操作XML文件---ok
*/
@Service
@Transactional
public class PushExcelDao {
	private static final Logger logger = Logger.getLogger(PushExcelDao.class);
	final String uid="sys";
	/**
	 * 
		 *@author lisw
		 *@Description: 查询列表
		 *@creatTime:2017年6月3日 下午7:20:05 
		 *@return:@param searchValue
		 *@return:@return List<ExcelSubscribe>
		 *@modifier:
		 *@modifTime:
		 *@throws
	 */
	public List<ExcelSubscribe> getExcelSubscribeList(String searchValue){
		List<ExcelSubscribe> list=new ArrayList<ExcelSubscribe>();
		StringBuffer sql=new StringBuffer();
		sql.append("select id,mail_title_excel,table_id,table_name,screening,send_type_excel,send_time_excel, ");
		sql.append(" send_state_excel,excel_mail,creator_id,create_time,updater_id,update_time,status ");
		sql.append(" from subscribe_excel_report where 1=1 and status=1 ");
		
		if(Tools.isNotEmpty(searchValue)){
			sql.append(" and excel_mail like '%'||?||'%'  or send_state_excel like '%'||?||'%'  or send_time_excel like '%'||?||'%'  ");
		}
		
		 Connection conn=DB.getPortalConn();
		 PreparedStatement pstmt=null;
		 ResultSet rs=null;
		 try {
			pstmt=conn.prepareStatement(sql.toString());
			if(Tools.isNotEmpty(searchValue)){
				pstmt.setString(1, searchValue);
				pstmt.setString(2, searchValue);
				pstmt.setString(3, searchValue);
			}
			rs=	pstmt.executeQuery();
			while( rs.next()){
				ExcelSubscribe excelSubscribe=new ExcelSubscribe();
				excelSubscribe.setMailTitleExcel(rs.getString("mail_title_excel"));
				excelSubscribe.setTableId(rs.getString("table_id"));
				excelSubscribe.setTableName(rs.getString("table_name"));
				excelSubscribe.setScreening(rs.getString("screening"));
				String sendTypeExcel=rs.getString("send_type_excel");
				String sendTypeNameExcel=SubscribeExcelType.getName(sendTypeExcel);
				excelSubscribe.setSendTypeExcel(sendTypeExcel);
				excelSubscribe.setSendTypeNameExcel(sendTypeNameExcel);
				excelSubscribe.setSendTimeExcel(rs.getString("send_time_excel"));
				excelSubscribe.setSendStateExcel(rs.getString("send_state_excel"));
				excelSubscribe.setExcelMails(rs.getString("excel_mail"));
				list.add(excelSubscribe);
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally{
			DB.close(conn, pstmt, rs);
		}
		return list;
	}
	
	/**
	 * 
		 *@author lisw
		 *@Description: 依据tableId查询ExcelSubscribe详细信息
		 *@creatTime:2017年6月3日 下午9:12:18 
		 *@return:@param tableId
		 *@return:@return ExcelSubscribe
		 *@modifier:
		 *@modifTime:
		 *@throws
	 */
	public ExcelSubscribe getExcelSubscribeById(String tableId){
		ExcelSubscribe excelSubscribe=new ExcelSubscribe();
		Connection conn=DB.getPortalConn();
		PreparedStatement pstmt=null;
		ResultSet rs=null;
		StringBuffer sql=new StringBuffer();
		sql.append("select id,mail_title_excel,table_id,table_name,screening,send_type_excel,send_time_excel, ");
		sql.append(" send_state_excel,excel_mail,creator_id,create_time,updater_id,update_time,status ");
		sql.append(" from subscribe_excel_report where 1=1 and status=1 and table_id=? ");
		try {
			pstmt=conn.prepareStatement(sql.toString());
			pstmt.setString(1,tableId);
			rs=pstmt.executeQuery();
			while(rs.next()){
				excelSubscribe.setMailTitleExcel(rs.getString("mail_title_excel"));
				excelSubscribe.setTableId(rs.getString("table_id"));
				excelSubscribe.setTableName(rs.getString("table_name"));
				excelSubscribe.setScreening(rs.getString("screening"));
				String sendTypeExcel=rs.getString("send_type_excel");
				String sendTypeNameExcel=SubscribeExcelType.getName(sendTypeExcel);
				excelSubscribe.setSendTypeExcel(sendTypeExcel);
				excelSubscribe.setSendTypeNameExcel(sendTypeNameExcel);
				excelSubscribe.setSendTimeExcel(rs.getString("send_time_excel"));
				excelSubscribe.setSendStateExcel(rs.getString("send_state_excel"));
				excelSubscribe.setExcelMails(rs.getString("excel_mail"));
			}
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return excelSubscribe;
	}
	
	public boolean addExcelSubscribe(ExcelSubscribe excel){
		boolean flag=false;
		Connection conn=DB.getPortalConn();
		PreparedStatement pstmt=null;
		ResultSet rs=null;
		//获取当前登录人id
		 //String uid = UserHolder.getId();
		 
		 List<String> mailListExcel = excel.getMailListExcel();
		 String mail=""; 
		 for (int i = 0; i < mailListExcel.size(); i++) {
			if(i==0){
					mail=mailListExcel.get(i);
			}else{
				mail+=Constants.DELIMITER+mailListExcel.get(i);
			}
			 
		 }
		StringBuffer sql=new StringBuffer();
		sql.append("insert into  subscribe_excel_report ");
		sql.append(" (id,mail_title_excel,table_id,table_name,screening,send_type_excel,send_time_excel, ");
		sql.append(" send_state_excel,excel_mail,creator_id,create_time,updater_id,update_time,status) ");
		sql.append(" values ");
		sql.append(" (?,?,?,?,?,?,?,?,?,?,?,?,?,?) ");
		try{
			pstmt=conn.prepareStatement(sql.toString());
			pstmt.setString(1, UUID.randomUUID().toString());
			pstmt.setString(2,excel.getMailTitleExcel());
			pstmt.setString(3,excel.getTableId());
			pstmt.setString(4,excel.getTableName());
			pstmt.setString(5,excel.getScreening());
			pstmt.setString(6,excel.getSendTypeExcel());
			pstmt.setString(7,excel.getSendTimeExcel());
			pstmt.setString(8,excel.getSendStateExcel());
			pstmt.setString(9,mail);
			pstmt.setString(10,uid);
			pstmt.setString(11,Tools.getCurrFormatTimeGen());
			pstmt.setString(12,uid);
			pstmt.setString(13,Tools.getCurrFormatTimeGen());
			pstmt.setString(14,"1");
			pstmt.execute();
			flag=true;
		}catch(Exception e){
			e.printStackTrace();
			flag=false;
		}finally{
			DB.commit(conn);
			DB.close(conn, pstmt);
		}
		return flag;
		
	}
	
	public boolean updateExcelSubscribe(ExcelSubscribe excel){
		boolean flag=false;
		Connection conn=DB.getPortalConn();
		PreparedStatement pstmt=null;
		ResultSet rs=null;
		//获取当前登录人id
		 String uid = UserHolder.getId();
		 
		 List<String> mailListExcel = excel.getMailListExcel();
		 String mail=""; 
		 for (int i = 0; i < mailListExcel.size(); i++) {
			if(i==0){
					mail=mailListExcel.get(i);
			}else{
				mail+=Constants.DELIMITER+mailListExcel.get(i);
			}
			 
		 }
		StringBuffer sql=new StringBuffer();
		sql.append("update  subscribe_excel_report ");
		sql.append(" set mail_title_excel=?,screening=?,send_type_excel=?,send_time_excel=?, ");
		sql.append(" send_state_excel=?,excel_mail=?,updater_id=?,update_time=?,,temp_send_time=?,is_today_send=? ");
		sql.append(" where table_id=? ");
		try{
			pstmt=conn.prepareStatement(sql.toString());
			pstmt.setString(1,excel.getMailTitleExcel());
			pstmt.setString(2,excel.getScreening());
			pstmt.setString(3,excel.getSendTypeExcel());
			pstmt.setString(4,excel.getSendTimeExcel());
			pstmt.setString(5,excel.getSendStateExcel());
			pstmt.setString(6,mail);
			pstmt.setString(7,uid);
			pstmt.setString(8,Tools.getCurrFormatTimeGen());
			pstmt.setString(9,excel.getTableId());
			pstmt.execute();
			flag=true;
		}catch(Exception e){
			e.printStackTrace();
			flag=false;
		}finally{
			DB.commit(conn);
			DB.close(conn, pstmt);
		}
		return flag;
		
	}
	
	/**
	 * 
		 *@author lisw
		 *@Description: 更新当天发送情况字段
		 *@creatTime:2017年6月11日 下午3:49:52 
		 *@return:@param report
		 *@return:@return String
		 *@modifier:
		 *@modifTime:
		 *@throws
	 */
	public  String updateSendTimeExcelSubscribe(ExcelSubscribe excelReport){
		String result=null;
		//依据reportId查询reportName
		String reportName ="";

		StringBuffer sql=new StringBuffer();
		 sql.append("update  subscribe_excel_report set ");
		 sql.append(" is_today_send =?,temp_send_time=? ");
		 sql.append(" where table_id =? and status=1");
		 Connection conn=null;
		 PreparedStatement pstmt=null;
		 try {
			conn=DB.getPortalConn();
			 pstmt=conn.prepareStatement(sql.toString());
			 pstmt.setString(1,excelReport.getIsTodaySend());
			 pstmt.setString(2,excelReport.getPtempSendTime());
			 pstmt.setString(3,excelReport.getTableId());
			 pstmt.execute();
			 result="修改成功";
		} catch (Exception e) {
			e.printStackTrace();
			result="修改失败";
		}finally{
			DB.commit(conn);
			DB.close(conn, pstmt);
		}
		 return result;
	}
	/**
	 * 
		 *@author lisw
		 *@Description: 删除，逻辑删除，修改状态即可
		 *@creatTime:2017年6月6日 上午11:52:48 
		 *@return:@param tableId
		 *@return:@return boolean
		 *@modifier:
		 *@modifTime:
		 *@throws
	 */
	public  boolean  deleteExcelConfig(String tableId)  {
		boolean result=false;
		 
		 StringBuffer sql=new StringBuffer();
		 sql.append("update subscribe_excel_report set ");
		 sql.append(" status=?,updater_id=?,update_time=?");
		 sql.append(" where table_id =?");
		 Connection conn=null;
		 PreparedStatement pstmt=null;
		 try {
			conn=DB.getPortalConn();
			 pstmt=conn.prepareStatement(sql.toString());
			 pstmt.setString(1,"0");
			 pstmt.setString(2,UserHolder.getId());
			 pstmt.setString(3,Tools.getCurrFormatTimeGen());//update_time
			 pstmt.setString(4,tableId);//update_time
			 pstmt.execute();
			 result=true;
		} catch (Exception e) {
			e.printStackTrace();
			result=false;
		}finally{
			DB.commit(conn);
			DB.close(conn, pstmt);
		}
		 return result;
	}
	
	/**
	 * 
		 *@author lisw
		 *@Description:删除，物理删除，直接从数据库删除数据
		 *@creatTime:2017年6月6日 上午11:53:08 
		 *@return:@param tableId
		 *@return:@return boolean
		 *@modifier:
		 *@modifTime:
		 *@throws
	 */
	public  boolean dropExcelConfig(String tableId)  {
		boolean result=false;
		 
		 StringBuffer sql=new StringBuffer();
		 sql.append("delete from subscribe_excel_report where table_id =?");
		 Connection conn=null;
		 PreparedStatement pstmt=null;
		 try {
			conn=DB.getPortalConn();
			 pstmt=conn.prepareStatement(sql.toString());
			 pstmt.setString(1,tableId);//update_time
			 pstmt.execute();
			 result=true;
		} catch (Exception e) {
			e.printStackTrace();
		}finally{
			DB.commit(conn);
			DB.close(conn, pstmt);
		}
		 return result;
	}
	
	
	
	/**
	 * 
		 *@author lisw
		 *@Description: 删除excel发送结果
		 *@creatTime:2017年6月6日 上午11:57:40 
		 *@return:@param tableId
		 *@return:@return
		 *@return:@throws Exception boolean
		 *@modifier:
		 *@modifTime:
		 *@throws
	 */
	public boolean dropSendExcelResult(String tableId)  throws Exception  {
		boolean result=false;
		 
		 StringBuffer sql=new StringBuffer();
		 sql.append("delete from subscribe_excel_result where table_id =?");
		 Connection conn=null;
		 PreparedStatement pstmt=null;
		 try {
			conn=DB.getPortalConn();
			 pstmt=conn.prepareStatement(sql.toString());
			 pstmt.setString(1,tableId);//update_time
			 pstmt.execute();
			 result=true;
		} catch (Exception e) {
			e.printStackTrace();
		}finally{
			DB.commit(conn);
			DB.close(conn, pstmt);
		}
		 return result;
	}
	
	public boolean addExcelSubscribeResult(Map<String, List<SendExcelResult>> sendExcelResultMap){
		boolean flag=false;
		String tableId=null;
		String mails=null;
		String sendTime=null;
		String sendState=null;
		
		Connection conn=DB.getPortalConn();
		PreparedStatement pstmt=null;
		ResultSet rs=null;
		
		StringBuffer sql=new StringBuffer();
		sql.append("insert into  subscribe_excel_result ");
		sql.append(" (id,table_id,mails,send_time,send_state,creator_id,create_time,status) ");
		sql.append(" values ");
		sql.append(" (?,?,?,?,?,?,?,?) ");
		
		//获取当前登录人id
		 String uid = "sys";
		for (String key : sendExcelResultMap.keySet()) {
			for (SendExcelResult ser : sendExcelResultMap.get(key)) {
				try {
					if (Tools.isNotEmpty(ser.getTableId())) {
						tableId = ser.getTableId();
					}
	
					if (Tools.isNotEmpty(ser.getEmailId())) {
						mails = ser.getEmailId();
						if (Tools.isNotEmpty(ser.getSendTimeExcel())) {
							sendTime = ser.getSendTimeExcel();
						}
						if (Tools.isNotEmpty(ser.getSendStateExcel())) {
							sendState = ser.getSendStateExcel();
						}
					}
					pstmt = conn.prepareStatement(sql.toString());
					pstmt.setString(1,UUID.randomUUID().toString());
			 	   pstmt.setString(2,tableId);
				   pstmt.setString(3,mails);
				   pstmt.setString(4,sendTime);
				   pstmt.setString(5,sendState);
				   pstmt.setString(6,uid);//creator_id
				   pstmt.setString(7,Tools.getCurrFormatTimeGen());//create_time
				   pstmt.setString(8,"1");
				   pstmt.execute();
				   flag=true;
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}finally{
					DB.commit(conn);
					DB.close(conn, pstmt);
				}
			}
		}
		 
		return flag;
		
	}
}
