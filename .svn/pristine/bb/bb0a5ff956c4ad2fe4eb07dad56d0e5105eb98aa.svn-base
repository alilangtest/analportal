package byit.tableausubscribe.tab.service;

import java.io.File;
import java.io.FileOutputStream;
import java.io.UnsupportedEncodingException;
import java.sql.Connection;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.util.Vector;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.fasterxml.jackson.databind.ObjectMapper;

import byit.tableausubscribe.common.util.Constants;
import byit.tableausubscribe.common.util.TableauInceptHelper;
import byit.tableausubscribe.common.util.TableauTicket;
import byit.tableausubscribe.common.util.TableauTools;
import byit.tableausubscribe.common.util.mail.MailConstants;
import byit.tableausubscribe.common.util.mail.MailNotice;
import byit.tableausubscribe.common.util.mail.MailSendPack;
import byit.tableausubscribe.common.util.mail.MailSenderInfo;
import byit.tableausubscribe.common.util.mail.MailUtils;
import byit.tableausubscribe.config.PropertiesConfig;
import byit.tableausubscribe.tab.bean.ExcelSubscribe;
import byit.tableausubscribe.tab.bean.IdaPmReport;
import byit.tableausubscribe.tab.bean.ReportSubscribe;
import byit.tableausubscribe.tab.bean.SendExcelResult;
import byit.tableausubscribe.tab.bean.SendResult;
import byit.tableausubscribe.tab.bean.SubscribeExcelType;
import byit.tableausubscribe.tab.bean.SubscribeType;
import byit.tableausubscribe.tab.dao.ExcelOper;
import byit.tableausubscribe.tab.dao.PushExcelDao;
import byit.tableausubscribe.tab.dao.PushReportDao;
import byit.tableausubscribe.tab.dao.TableauDao;
import byit.utils.Tools;

@Service
@Transactional
public class EmailTask {
	private String filePath = Constants.tempPath;
	@Autowired
	private BankService bankService;
	@Autowired
	private TableauService tableauService;
	@Autowired
	private PushReportDao operDao;
	@Autowired
	private TableauDao tableauDao;
	@Autowired
	private PushExcelDao excelDao;
	@Autowired
	private ExcelOper eoper;
	//@Autowired
	//private SendExcelOper seoper;
	private String localIp = "127.0.0.1";//"25.0.88.163";//tableau信任的客户端
	private final SimpleDateFormat dateSdf = new SimpleDateFormat(
			"yyyy-MM-dd HH:mm");
	private ExecutorService executor = Executors.newCachedThreadPool();
	private static final Logger logger = Logger.getLogger(EmailTask.class);

	public void execute() {
		try {
			System.out.println("进入发送邮件的定时任务，当前时间:" + dateSdf.format(new Date()) + "");
			sendEmail();
			sendExcelEmail();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * 邮件推送 1->订阅规则是否该推送--时间 2>判断数据是否翻盘--判断条件_银行 3>邮件发送--保存到发送记录表
	 * 
	 * @throws Exception
	 * @author wangchunquan
	 */
	public String sendEmailByManual(String reportId) throws Exception {
		logger.debug("-----------EmailTask-------- reportId=" + reportId);
		Calendar nowDate = Calendar.getInstance();
		String resultStr = "发送失败";
		// -----------------------遍历配置信息：是否需要发送邮件(时间类型、规则)------------------------------------------------//
		for (ReportSubscribe rs : operDao.getReportSubscribeList("")/*InitReportSubscribeConfig.reportSubscribeConfig*/) {
			// 判断是否为选中的仪表板
			if (reportId.equals(rs.getReportId())) {
				if (rs.getNextTime() == null) {// 时间格式不对，没有成功设置发送时间
					continue;
				}
				// 一分钟遍历一次
				if (SubscribeType.once.getIndex().equals(rs.getSendType())
						&& rs.getNextTime() != null) {
					isSendMailReport(rs);
					rs.setNextTime(null);// 代表已执行完毕
					rs.setSendState("已发送");
					resultStr = "发送成功";
				} else if (SubscribeType.day.getIndex()
						.equals(rs.getSendType())
						&& nowDate.getTime().before(rs.getNextTime())) {
					isSendMailReport(rs);
					rs.setSendState("已发送");
					resultStr = "发送成功";
				} else if (SubscribeType.week.getIndex().equals(
						rs.getSendType())
						&& nowDate.getTime().before(rs.getNextTime())) {

					logger.debug("每周：" + SubscribeType.week.getIndex()
							+ "；下次发送时间rs.getNextTime()：" + rs.getNextTime()
							+ "获取发送时间 rs.getSendTime()：" + rs.getSendTime());
					String[] str = rs.getSendTime().split("_");

					String[] dayx = str[0].split(",");
					logger.debug("dayx.length长度是：" + dayx.length + "内容是"
							+ dayx[0]);
					// 0->length-1
					// 获取今天是星期几
					Date date = new Date();
					SimpleDateFormat dateFm = new SimpleDateFormat("EEEE");
					String da = dateFm.format(date);
					if (da.equals("星期日")) {
						da = "1";
					} else if (da.equals("星期一")) {
						da = "2";
					} else if (da.equals("星期二")) {
						da = "3";
					} else if (da.equals("星期三")) {
						da = "4";
					} else if (da.equals("星期四")) {
						da = "5";
					} else if (da.equals("星期五")) {
						da = "6";
					} else if (da.equals("星期六")) {
						da = "7";
					}

					int countWeek = 0;
					int countWeek0 = 0;
					int countWeek1 = 0;
					int countWeek2 = 0;
					int countWeek3 = 0;
					int countWeek4 = 0;
					int countWeek5 = 0;

					long d = rs.getNextTime().getTime()
							- nowDate.getTime().getTime();
					// if (d <= 2 * 60 * 1000 && d > 0) {
					// 满足发送条件
					isSendMailReport(rs);
//					nowDate.setTime(rs.getNextTime());
					// nowDate.add(Calendar.DATE,7);
					// 判断今天是否等于所选的发送星期
					for (int y = 0; y < dayx.length; y++) {
						// 选定的星期等于今天
						if (dayx[y].equals(da)) {
							// 选择的天数的判断
							switch (dayx.length) {
							case 1:
								// 选1天
//								nowDate.add(Calendar.DATE, 7);
								break;
							case 2:
								// 选2天
								if (y == 0) {
									// 下标为0
									countWeek0 = Integer.parseInt(dayx[0]);
									countWeek1 = Integer.parseInt(dayx[1]);
									countWeek = countWeek1 - countWeek0;
//									nowDate.add(Calendar.DATE, countWeek);
								} else if (y == 1) {
									// 下标为1
									countWeek0 = Integer.parseInt(dayx[0]);
									countWeek1 = Integer.parseInt(dayx[1]);
									countWeek = countWeek0 + 7 - countWeek1;
//									nowDate.add(Calendar.DATE, countWeek);
								}
								break;
							case 3:
								// 选3天
								if (y == 0) {
									// 下标为0
									countWeek0 = Integer.parseInt(dayx[0]);
									countWeek1 = Integer.parseInt(dayx[1]);
									countWeek = countWeek1 - countWeek0;
//									nowDate.add(Calendar.DATE, countWeek);
								} else if (y == 1) {
									// 下标为1
									countWeek1 = Integer.parseInt(dayx[1]);
									countWeek2 = Integer.parseInt(dayx[2]);
									countWeek = countWeek2 - countWeek1;
//									nowDate.add(Calendar.DATE, countWeek);
								} else if (y == 2) {
									// 下标为2
									countWeek0 = Integer.parseInt(dayx[0]);
									countWeek2 = Integer.parseInt(dayx[2]);
									countWeek = countWeek0 + 7 - countWeek2;
//									nowDate.add(Calendar.DATE, countWeek);
								}
								break;
							case 4:
								// 选4天
								if (y == 0) {
									// 下标为0
									countWeek0 = Integer.parseInt(dayx[0]);
									countWeek1 = Integer.parseInt(dayx[1]);
									countWeek = countWeek1 - countWeek0;
//									nowDate.add(Calendar.DATE, countWeek);
								} else if (y == 1) {
									// 下标为1
									countWeek1 = Integer.parseInt(dayx[1]);
									countWeek2 = Integer.parseInt(dayx[2]);
									countWeek = countWeek2 - countWeek1;
//									nowDate.add(Calendar.DATE, countWeek);
								} else if (y == 2) {
									// 下标为2
									countWeek2 = Integer.parseInt(dayx[2]);
									countWeek3 = Integer.parseInt(dayx[3]);
									countWeek = countWeek3 - countWeek2;
//									nowDate.add(Calendar.DATE, countWeek);
								} else if (y == 3) {
									// 下标为3
									countWeek0 = Integer.parseInt(dayx[0]);
									countWeek3 = Integer.parseInt(dayx[3]);
									countWeek = countWeek0 + 7 - countWeek3;
//									nowDate.add(Calendar.DATE, countWeek);
								}
								break;
							case 5:
								// 选5天
								if (y == 0) {
									// 下标为0
									countWeek0 = Integer.parseInt(dayx[0]);
									countWeek1 = Integer.parseInt(dayx[1]);
									countWeek = countWeek1 - countWeek0;
//									nowDate.add(Calendar.DATE, countWeek);
								} else if (y == 1) {
									// 下标为1
									countWeek1 = Integer.parseInt(dayx[1]);
									countWeek2 = Integer.parseInt(dayx[2]);
									countWeek = countWeek2 - countWeek1;
//									nowDate.add(Calendar.DATE, countWeek);
								} else if (y == 2) {
									// 下标为2
									countWeek2 = Integer.parseInt(dayx[2]);
									countWeek3 = Integer.parseInt(dayx[3]);
									countWeek = countWeek3 - countWeek2;
//									nowDate.add(Calendar.DATE, countWeek);
								} else if (y == 3) {
									// 下标为3
									countWeek3 = Integer.parseInt(dayx[3]);
									countWeek4 = Integer.parseInt(dayx[4]);
									countWeek = countWeek4 - countWeek3;
//									nowDate.add(Calendar.DATE, countWeek);
								} else if (y == 4) {
									// 下标为4
									countWeek0 = Integer.parseInt(dayx[0]);
									countWeek4 = Integer.parseInt(dayx[4]);
									countWeek = countWeek0 + 7 - countWeek4;
//									nowDate.add(Calendar.DATE, countWeek);
								}
								break;
							case 6:
								// 选6天
								if (y == 0) {
									// 下标为0
									countWeek0 = Integer.parseInt(dayx[0]);
									countWeek1 = Integer.parseInt(dayx[1]);
									countWeek = countWeek1 - countWeek0;
//									nowDate.add(Calendar.DATE, countWeek);
								} else if (y == 1) {
									// 下标为1
									countWeek1 = Integer.parseInt(dayx[1]);
									countWeek2 = Integer.parseInt(dayx[2]);
									countWeek = countWeek2 - countWeek1;
//									nowDate.add(Calendar.DATE, countWeek);
								} else if (y == 2) {
									// 下标为2
									countWeek2 = Integer.parseInt(dayx[2]);
									countWeek3 = Integer.parseInt(dayx[3]);
									countWeek = countWeek3 - countWeek2;
//									nowDate.add(Calendar.DATE, countWeek);
								} else if (y == 3) {
									// 下标为3
									countWeek3 = Integer.parseInt(dayx[3]);
									countWeek4 = Integer.parseInt(dayx[4]);
									countWeek = countWeek4 - countWeek3;
//									nowDate.add(Calendar.DATE, countWeek);
								} else if (y == 4) {
									// 下标为4
									countWeek4 = Integer.parseInt(dayx[4]);
									countWeek5 = Integer.parseInt(dayx[5]);
									countWeek = countWeek5 - countWeek4;
//									nowDate.add(Calendar.DATE, countWeek);
								} else if (y == 5) {
									// 下标为5
									countWeek0 = Integer.parseInt(dayx[0]);
									countWeek5 = Integer.parseInt(dayx[5]);
									countWeek = countWeek0 + 7 - countWeek5;
//									nowDate.add(Calendar.DATE, countWeek);
								}
								break;
							case 7:
								// 选7天
//								nowDate.add(Calendar.DATE, 1);
								break;
							}
						}
					}

//					rs.setNextTime(nowDate.getTime());
					rs.setSendState("已发送");
					resultStr = "发送成功";
					// }

				} else if (SubscribeType.month.getIndex().equals(
						rs.getSendType())
						&& nowDate.getTime().before(rs.getNextTime())) {
					////logger.debug("-----------EmailTask --------------------------------一月遍历一次");
					isSendMailReport(rs);
//					nowDate.setTime(rs.getNextTime());
//					nowDate.add(Calendar.MONTH, 1);
//					rs.setNextTime(nowDate.getTime());
					rs.setSendState("已发送");
					resultStr = "发送成功";
				} else if (SubscribeType.year.getIndex().equals(
						rs.getSendType())
						&& nowDate.getTime().before(rs.getNextTime())) {
					////logger.debug("-----------EmailTask --------------------------------一年遍历一次");
					isSendMailReport(rs);
//					nowDate.setTime(rs.getNextTime());
//					nowDate.add(Calendar.YEAR, 1);
//					rs.setNextTime(nowDate.getTime());
					rs.setSendState("已发送");
					resultStr = "发送成功";
				}
			}
		}
		return resultStr;
	}

	/**
	 * 邮件推送 1->订阅规则是否该推送--时间 2>判断数据是否翻盘--判断条件_银行 3>邮件发送--保存到发送记录表
	 * 
	 * @throws Exception
	 */
	private void sendEmail() throws Exception {
		System.out.println("进入定时发送仪表板的任务，当前时间:" + dateSdf.format(new Date()) + "");
		Calendar nowDate = Calendar.getInstance();
		Date curremtTime=nowDate.getTime();
		logger.debug("当前时间："+Tools.getCurrFormatTimeMin(curremtTime));
		// -----------------------遍历配置信息：是否需要发送邮件(时间类型、规则)------------------------------------------------//

		List<ReportSubscribe>  reportSubscribeList=operDao.getReportSubscribeList("");
		ReportSubscribe rs=new ReportSubscribe();
		Date sendNextTime=null;
		logger.debug("数据库中一共有【"+reportSubscribeList.size()+"】个报表");
		for (int i = 0; i < reportSubscribeList.size(); i++) {
			
			logger.debug("循环第【"+i+"】个报表！");
			rs=reportSubscribeList.get(i);
			//当天临时发送的时间和当前时间的时间差，当天数据未到位时，会给这个字段赋值，其他情况暂不赋值
			long d1 = 0L;
			if(rs.getTempSendTime()!=null){
				d1 = rs.getTempSendTime().getTime()- nowDate.getTime().getTime();
			}
			
			sendNextTime=rs.getNextTime();
			logger.debug("下次发送时间："+sendNextTime);
		//}
			if (rs.getNextTime() == null) {// 时间格式不对，没有成功设置发送时间
				continue;
			}
			// 一分钟遍历一次
			if (SubscribeType.once.getIndex().equals(rs.getSendType())
					&& rs.getNextTime() != null) {
				logger.debug("发送类型：仅发送一次。");
				long d = rs.getNextTime().getTime()
						- nowDate.getTime().getTime();
				// 提前一分钟发邮件2分钟 记录下次时间(必须),以防被遗漏
				if (d <= 2 * 60 * 1000 && d > 0) {
					// 满足发送条件
					isSendMailReport(rs);
					rs.setNextTime(null);// 代表已执行完毕
					rs.setSendState("已发送");
				}
				//
			} /*else if (SubscribeType.day.getIndex().equals(rs.getSendType()) && nowDate.getTime().before(rs.getNextTime())){
				//当时按天发送并且当前时间在客户指定规则的时间之前
				long d = rs.getNextTime().getTime()- nowDate.getTime().getTime();
				logger.debug("发送时间=" + dateSdf.format(rs.getNextTime())
						+ "--当前时间=" + dateSdf.format(nowDate.getTime()));
				if (d <= 2 * 60 * 1000 && d > 0) {
					// 满足发送条件
					isSendMailReport(rs);
					nowDate.setTime(rs.getNextTime());
					nowDate.add(Calendar.DATE, 1);
					rs.setNextTime(nowDate.getTime());
					rs.setSendState("已发送");
				}
			}*/else if (SubscribeType.day.getIndex().equals(rs.getSendType())){
					//long d1 = rs.getTempSendTime().getTime()- nowDate.getTime().getTime();
				if(nowDate.getTime().before(rs.getNextTime())){//如果当前之间在下次发送之前
					long d = rs.getNextTime().getTime()- nowDate.getTime().getTime();
					logger.debug("发送时间=" + dateSdf.format(rs.getNextTime())
							+ "--当前时间=" + dateSdf.format(nowDate.getTime()));
					if (d <= 2 * 60 * 1000 && d > 0) {
						// 满足发送条件
						isSendMailReport(rs);
						nowDate.setTime(rs.getNextTime());
						nowDate.add(Calendar.DATE, 1);
						rs.setNextTime(nowDate.getTime());
						rs.setSendState("已发送");
					}
				}
				if((Tools.getCurrFormatTimeDay(nowDate.getTime()).equals(Tools.getCurrFormatTimeDay(rs.getTempSendTime()))) 
							&&
						 ("false".equals(rs.getIsTodaySend()))
						 	&&
						 (d1 <= 2 * 60 * 1000 && d1 > 0)
						 ){
					//如果当前时间和下次发送的时间是同一天。并且当天没有按照用户的规则发送数据，并且该报表当天下次临时发送时间和当前时间差为2分钟
					isSendMailReport(rs);
					rs.setSendState("已发送");
					
				}
				
			} //else if (SubscribeType.week.getIndex().equals(rs.getSendType())&& nowDate.getTime().before(rs.getNextTime())) {
			else if(SubscribeType.week.getIndex().equals(rs.getSendType())){
				if(nowDate.getTime().before(rs.getNextTime())){
					logger.debug("发送类型：每周发，下次发送时间rs.getNextTime()：" + rs.getNextTime()+"，每周发送时间："+rs.getSendTime());
					String[] str = rs.getSendTime().split("_");

					String[] dayx = str[0].split(",");
					logger.debug("每周发送的天数是：" + dayx.length + "，每周第一次发送的日期是："+ dayx[0]);
					// 0->length-1
					// 获取今天是星期几
					Date date = new Date();
					SimpleDateFormat dateFm = new SimpleDateFormat("EEEE");
					String da = dateFm.format(date);
					logger.debug("今天是："+da);
					if (da.equals("星期日")) {
						da = "1";
					} else if (da.equals("星期一")) {
						da = "2";
					} else if (da.equals("星期二")) {
						da = "3";
					} else if (da.equals("星期三")) {
						da = "4";
					} else if (da.equals("星期四")) {
						da = "5";
					} else if (da.equals("星期五")) {
						da = "6";
					} else if (da.equals("星期六")) {
						da = "7";
					}

					int countWeek = 0;
					int countWeek0 = 0;
					int countWeek1 = 0;
					int countWeek2 = 0;
					int countWeek3 = 0;
					int countWeek4 = 0;
					int countWeek5 = 0;

					long d = rs.getNextTime().getTime()- nowDate.getTime().getTime();
					logger.debug("发送与当前的时间差为："+d);
					logger.debug("二分钟之内的时间差是："+2 * 60 * 1000);
					if (d <= 2 * 60 * 1000 && d > 0) {
						logger.debug("时间差在2分钟内");
						// 满足发送条件
						isSendMailReport(rs);
						nowDate.setTime(rs.getNextTime());
						// 判断今天是否等于所选的发送星期
						for (int y = 0; y < dayx.length; y++) {
							// 选定的星期等于今天
							if (dayx[y].equals(da)) {
								// 选择的天数的判断
								switch (dayx.length) {
								case 1:
									// 选1天
									nowDate.add(Calendar.DATE, 7);
									break;
								case 2:
									// 选2天
									if (y == 0) {
										// 下标为0
										countWeek0 = Integer.parseInt(dayx[0]);
										countWeek1 = Integer.parseInt(dayx[1]);
										countWeek = countWeek1 - countWeek0;
										nowDate.add(Calendar.DATE, countWeek);
									} else if (y == 1) {
										// 下标为1
										countWeek0 = Integer.parseInt(dayx[0]);
										countWeek1 = Integer.parseInt(dayx[1]);
										countWeek = countWeek0 + 7 - countWeek1;
										nowDate.add(Calendar.DATE, countWeek);
									}
									break;
								case 3:
									// 选3天
									if (y == 0) {
										// 下标为0
										countWeek0 = Integer.parseInt(dayx[0]);
										countWeek1 = Integer.parseInt(dayx[1]);
										countWeek = countWeek1 - countWeek0;
										nowDate.add(Calendar.DATE, countWeek);
									} else if (y == 1) {
										// 下标为1
										countWeek1 = Integer.parseInt(dayx[1]);
										countWeek2 = Integer.parseInt(dayx[2]);
										countWeek = countWeek2 - countWeek1;
										nowDate.add(Calendar.DATE, countWeek);
									} else if (y == 2) {
										// 下标为2
										countWeek0 = Integer.parseInt(dayx[0]);
										countWeek2 = Integer.parseInt(dayx[2]);
										countWeek = countWeek0 + 7 - countWeek2;
										nowDate.add(Calendar.DATE, countWeek);
									}
									break;
								case 4:
									// 选4天
									if (y == 0) {
										// 下标为0
										countWeek0 = Integer.parseInt(dayx[0]);
										countWeek1 = Integer.parseInt(dayx[1]);
										countWeek = countWeek1 - countWeek0;
										nowDate.add(Calendar.DATE, countWeek);
									} else if (y == 1) {
										// 下标为1
										countWeek1 = Integer.parseInt(dayx[1]);
										countWeek2 = Integer.parseInt(dayx[2]);
										countWeek = countWeek2 - countWeek1;
										nowDate.add(Calendar.DATE, countWeek);
									} else if (y == 2) {
										// 下标为2
										countWeek2 = Integer.parseInt(dayx[2]);
										countWeek3 = Integer.parseInt(dayx[3]);
										countWeek = countWeek3 - countWeek2;
										nowDate.add(Calendar.DATE, countWeek);
									} else if (y == 3) {
										// 下标为3
										countWeek0 = Integer.parseInt(dayx[0]);
										countWeek3 = Integer.parseInt(dayx[3]);
										countWeek = countWeek0 + 7 - countWeek3;
										nowDate.add(Calendar.DATE, countWeek);
									}
									break;
								case 5:
									// 选5天
									if (y == 0) {
										// 下标为0
										countWeek0 = Integer.parseInt(dayx[0]);
										countWeek1 = Integer.parseInt(dayx[1]);
										countWeek = countWeek1 - countWeek0;
										nowDate.add(Calendar.DATE, countWeek);
									} else if (y == 1) {
										// 下标为1
										countWeek1 = Integer.parseInt(dayx[1]);
										countWeek2 = Integer.parseInt(dayx[2]);
										countWeek = countWeek2 - countWeek1;
										nowDate.add(Calendar.DATE, countWeek);
									} else if (y == 2) {
										// 下标为2
										countWeek2 = Integer.parseInt(dayx[2]);
										countWeek3 = Integer.parseInt(dayx[3]);
										countWeek = countWeek3 - countWeek2;
										nowDate.add(Calendar.DATE, countWeek);
									} else if (y == 3) {
										// 下标为3
										countWeek3 = Integer.parseInt(dayx[3]);
										countWeek4 = Integer.parseInt(dayx[4]);
										countWeek = countWeek4 - countWeek3;
										nowDate.add(Calendar.DATE, countWeek);
									} else if (y == 4) {
										// 下标为4
										countWeek0 = Integer.parseInt(dayx[0]);
										countWeek4 = Integer.parseInt(dayx[4]);
										countWeek = countWeek0 + 7 - countWeek4;
										nowDate.add(Calendar.DATE, countWeek);
									}
									break;
								case 6:
									// 选6天
									if (y == 0) {
										// 下标为0
										countWeek0 = Integer.parseInt(dayx[0]);
										countWeek1 = Integer.parseInt(dayx[1]);
										countWeek = countWeek1 - countWeek0;
										nowDate.add(Calendar.DATE, countWeek);
									} else if (y == 1) {
										// 下标为1
										countWeek1 = Integer.parseInt(dayx[1]);
										countWeek2 = Integer.parseInt(dayx[2]);
										countWeek = countWeek2 - countWeek1;
										nowDate.add(Calendar.DATE, countWeek);
									} else if (y == 2) {
										// 下标为2
										countWeek2 = Integer.parseInt(dayx[2]);
										countWeek3 = Integer.parseInt(dayx[3]);
										countWeek = countWeek3 - countWeek2;
										nowDate.add(Calendar.DATE, countWeek);
									} else if (y == 3) {
										// 下标为3
										countWeek3 = Integer.parseInt(dayx[3]);
										countWeek4 = Integer.parseInt(dayx[4]);
										countWeek = countWeek4 - countWeek3;
										nowDate.add(Calendar.DATE, countWeek);
									} else if (y == 4) {
										// 下标为4
										countWeek4 = Integer.parseInt(dayx[4]);
										countWeek5 = Integer.parseInt(dayx[5]);
										countWeek = countWeek5 - countWeek4;
										nowDate.add(Calendar.DATE, countWeek);
									} else if (y == 5) {
										// 下标为5
										countWeek0 = Integer.parseInt(dayx[0]);
										countWeek5 = Integer.parseInt(dayx[5]);
										countWeek = countWeek0 + 7 - countWeek5;
										nowDate.add(Calendar.DATE, countWeek);
									}
									break;
								case 7:
									// 选7天
									nowDate.add(Calendar.DATE, 1);
									break;
								}
							}
						}

						rs.setNextTime(nowDate.getTime());
						rs.setSendState("已发送");
					}
				}
				if((Tools.getCurrFormatTimeDay(nowDate.getTime()).equals(Tools.getCurrFormatTimeDay(rs.getTempSendTime()))) 
						&&
						("false".equals(rs.getIsTodaySend()))
					 	&&
					 	(d1 <= 2 * 60 * 1000 && d1 > 0)){
					//如果当前时间和下次发送的时间是同一天。并且当天没有按照用户的规则发送数据，并且该报表当天下次临时发送时间和当前时间差为2分钟
					isSendMailReport(rs);
					rs.setSendState("已发送");
				}
				
			} /*else if (SubscribeType.month.getIndex().equals(rs.getSendType())
					&& nowDate.getTime().before(rs.getNextTime())) {
				long d = rs.getNextTime().getTime()
						- nowDate.getTime().getTime();
				if (d <= 2 * 60 * 1000 && d > 0) {
					// 满足发送条件
					isSendMailReport(rs);
					nowDate.setTime(rs.getNextTime());
					nowDate.add(Calendar.MONTH, 1);
					rs.setNextTime(nowDate.getTime());
					rs.setSendState("已发送");
				}
			}*/ 
			else if (SubscribeType.month.getIndex().equals(rs.getSendType())){
				if(nowDate.getTime().before(rs.getNextTime())){
					long d = rs.getNextTime().getTime()
							- nowDate.getTime().getTime();
					if (d <= 2 * 60 * 1000 && d > 0) {
						// 满足发送条件
						isSendMailReport(rs);
						nowDate.setTime(rs.getNextTime());
						nowDate.add(Calendar.MONTH, 1);
						rs.setNextTime(nowDate.getTime());
						rs.setSendState("已发送");
					}
				}
				if((Tools.getCurrFormatTimeDay(nowDate.getTime()).equals(Tools.getCurrFormatTimeDay(rs.getTempSendTime()))) 
						&&
						("false".equals(rs.getIsTodaySend()))
					 	&&
					 	(d1 <= 2 * 60 * 1000 && d1 > 0)){
					//如果当前时间和下次发送的时间是同一天。并且当天没有按照用户的规则发送数据，并且该报表当天下次临时发送时间和当前时间差为2分钟
					isSendMailReport(rs);
					rs.setSendState("已发送");
				}
				
			}/*else if (SubscribeType.year.getIndex().equals(rs.getSendType())
					&& nowDate.getTime().before(rs.getNextTime())) {
				long d = rs.getNextTime().getTime()
						- nowDate.getTime().getTime();
				if (d <= 2 * 60 * 1000 && d > 0) {
					// 满足发送条件
					isSendMailReport(rs);
					nowDate.setTime(rs.getNextTime());
					nowDate.add(Calendar.YEAR, 1);
					rs.setNextTime(nowDate.getTime());
					rs.setSendState("已发送");

				}
			}*/
			else if (SubscribeType.year.getIndex().equals(rs.getSendType())){
				if(nowDate.getTime().before(rs.getNextTime())){
					long d = rs.getNextTime().getTime()
							- nowDate.getTime().getTime();
					if (d <= 2 * 60 * 1000 && d > 0) {
						// 满足发送条件
						isSendMailReport(rs);
						nowDate.setTime(rs.getNextTime());
						nowDate.add(Calendar.YEAR, 1);
						rs.setNextTime(nowDate.getTime());
						rs.setSendState("已发送");

					}
				}
				if((Tools.getCurrFormatTimeDay(nowDate.getTime()).equals(Tools.getCurrFormatTimeDay(rs.getTempSendTime()))) 
						&&
						("false".equals(rs.getIsTodaySend()))
					 	&&
					 	(d1 <= 2 * 60 * 1000 && d1 > 0)){
					//如果当前时间和下次发送的时间是同一天。并且当天没有按照用户的规则发送数据，并且该报表当天下次临时发送时间和当前时间差为2分钟
					isSendMailReport(rs);
					rs.setSendState("已发送");
				}
				
			}
		}
	}

	/**
	 * 邮件推送 1->订阅规则是否该推送--时间 2->判断数据是否翻盘--判断条件_银行 3>邮件发送--保存到发送记录表 附件：csv文件
	 * 
	 * @param reportSubscribe
	 *            订阅规则配置
	 * @throws Exception
	 */
	public String isSendMailReport(final ReportSubscribe reportSubscribe)
			throws Exception {
		
		logger.debug("开始准备发送");
		String result = "发送失败！";
		// 需要发送邮件的报表
		// 获取Tableau仪表板信息
		final List<IdaPmReport> reportList = tableauService.getViewDataSources(reportSubscribe.getReportId());
		logger.debug("仪表板个数：" + reportList.size());
		if (reportList != null && reportList.size() > 0) {
			// 配置文件中的数据源
			Map<String, String> dataSources = reportSubscribe.getDataSources();
			logger.debug("操作时选中的判定条件：" + dataSources);
			// 所有的数据源:
			List<IdaPmReport> dataSoruceList = bankService.getDataSource();
			logger.debug("数据库中查询出来的判定条件：" + dataSoruceList);
			String dataSourcesStr = "";
			int count = 0;
			for (int i = 0; i < dataSoruceList.size(); i++) {
				IdaPmReport ds=new IdaPmReport();
				ds=dataSoruceList.get(i);
				if("Y".equals(dataSources.get(ds.getDatasourceId()))){
					dataSourcesStr += ",'" + ds.getDatasourceId() + "'";
					count++;
				}
			}
			logger.debug("判定条件：" + dataSourcesStr);
			if (!"".equals(dataSourcesStr)) {
				// 因仪表板和判断条件没有关系，所以只要数据没有更新就都不发送
				int nowTime = bankService.isNewTableTime(dataSourcesStr
						.substring(1));
				if (nowTime == 0 || nowTime < count) {
					
					result = "数据没有更新，不发送！";
					
					//如果数据不更新将当天发送失败、当天下次发送时间存储到数据库中，下次执行定时任务时依据当天下次发送时间来判断
					ReportSubscribe tReportSubscribe=new ReportSubscribe();
					tReportSubscribe.setIsTodaySend("false");
					Long tnextSendTime=reportSubscribe.getTempSendTime().getTime();
					Long tempSendTime=tnextSendTime+Constants.TENMIN;
					tReportSubscribe.setReportId(reportSubscribe.getReportId());
					tReportSubscribe.setPtempSendTime((Tools.getCurrFormatTimeday(new Date(tempSendTime))));
					operDao.updateSendTimeSubscribe(tReportSubscribe);
					
					logger.debug(result);
					for (String email : reportSubscribe.getMailList()) {
						MailSenderInfo mailSenderInfo=new MailSenderInfo();
						mailSenderInfo.setToAddress(email);
						mailSenderInfo.setContent("名称为：【"+reportSubscribe.getReportName()+"】的仪表板数据未更新，不发送该条信息");
						mailSenderInfo.setSubject(reportSubscribe.getMailTitle());
						MailSendPack.sendContentEmailPack(mailSenderInfo);
					}
					
					// 只要有一个数据没更新就不发送邮件
					return result;
				}
			}
			executor.execute(new Runnable() {
				@Override
				public void run() {
					try {
						sendMail(reportList, reportSubscribe);
						// sendZipMail(reportList, reportSubscribe);
					} catch (Exception e) {
						e.printStackTrace();
					}

					logger.debug("~~~~~~~~~~~~~~~send~end~~~~~~~~~~~~~~~~~~~~~~~~~~");
				}

			});
			result = "发送成功！";
		}
		return result;
	}

	/**
	 * 邮件推送 1->订阅规则是否该推送--时间 2->判断数据是否翻盘--判断条件_银行 3->邮件发送--保存到发送记录表
	 * 
	 * @param reportList
	 * @throws Exception
	 */
	private void sendMail(List<IdaPmReport> reportList,
			ReportSubscribe reportSubscribe) throws Exception {
		boolean isSend=false;
		//就算数据有更新，也需要判断tableau中当天数据是否刷新
		//检查tableau数据是否刷新，如未刷新发送提示邮件，一个工作簿下多个仪表板，只要有一个仪表板数据不更新就不发送邮件
		Map<String,String> refreshedMap=tableauDao.getTableauRefreshed(reportSubscribe.getReportId());
		//isSend=TableauTools.isSend(refreshedMap);
		
		//TODO，生产环境需要使用上面代码，并且删除下一行的isSend=true;
		isSend=true;
		if(isSend){//如果tanleauserver仪表板数据已刷新
			// 创建一个线程池
			// IdaPmReport有多个数据源，为了去重
			Map<String, IdaPmReport> mapIpr = new HashMap<>();
			Vector<String> fileNameStrings = new Vector<String>();
			String imagesStr = "";
			String reportName = "";
			String fileName = "";
			if (reportList.size() > 0 && reportSubscribe.getMailList().size() > 0) {
				// 报表 多个
				for (IdaPmReport report : reportList) {
					if (mapIpr.get(report.getReportId()) == null) {
						mapIpr.put(report.getReportId(), report);
						String ticket = TableauTicket.getTrustedTicket(
								Constants.TABIP, Constants.TABUSER,localIp);
						String params = ":embed=y&:tabs=no&:toolbar=top";
						if (!ticket.equals("-1")) {
							// 取出的报表以图片的形式保存
							fileName = UUID.randomUUID().toString()
									+ "_"
									+ report.getUrl().substring(
											report.getUrl().lastIndexOf("/") + 1)
									+ ".png";
							logger.debug("fileName：" + fileName);
							// 保存的图片的链接地址
							String url = "http://" + Constants.TABIP + "/trusted/"
									+ ticket + "/views/" + report.getUrl()
									+ ".png?" + params;
							logger.debug("url：" + url);
							logger.debug("~~~~~~~~~~~~~~~~~~~~kais~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
							byte[] buffer = TableauInceptHelper.readResource(url);
							logger.debug("~~~~~~~~~~~~~~~~~~~~~~~jies~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
							/*File file=new File(filePath);
							if (!file.exists()) {
								file.mkdirs();
							}*/
							Tools.mkdir(filePath);
							FileOutputStream os = new FileOutputStream(filePath
									+ fileName);
							// 创建一个缓冲区，提高写入文件的效率
							os.write(buffer, 0, buffer.length);

							fileNameStrings.add(filePath + fileName);
							logger.debug("fileNameStrings :" + fileNameStrings);
							imagesStr = imagesStr + "<img src='" + filePath
									+ fileName + "'/>";
							logger.debug("imagesStr:" + imagesStr + ";filePath:"
									+ filePath);
							reportName += "," + report.getReportName();
							logger.debug("reportName:" + reportName);
							os.close();
						}
					}
				}
				logger.debug("imagesStr end:" + imagesStr + ";filePath:" + filePath);
				logger.debug("reportName end:" + reportName);
				logger.debug("fileNameStrings end:" + fileNameStrings);
				if (fileNameStrings.size() > 0) {
					logger.debug("imgs=" + imagesStr);
					logger.debug("mails=" + reportSubscribe.getMailList());
					MailNotice mail = new MailNotice();
					mail.setAttachFileNames(fileNameStrings);
					List<SendResult> sendResultList = new ArrayList<>();
					SendResult result;
					List<String> tListStr= reportSubscribe.getMailList();
					// 多个邮箱
					for (String email : reportSubscribe.getMailList()) {
						result = new SendResult();
						result.setReportId(reportSubscribe.getReportId());
						result.setEmailId(email);
						logger.debug("email：" + email);
						result.setSendTime(dateSdf.format(new Date()));
						result.setSendState("失败");
						try {
							// 发送附件
							MailUtils sendmail = new MailUtils();
							sendmail.setTo(email);
							sendmail.setSubject(reportSubscribe.getMailTitle());
							if ("1".equals(reportSubscribe.getSendDetails())) {
								// 发送附件
								for (String file : fileNameStrings) {
									sendmail.attachfile(file);
								}
								sendmail.setContent(reportSubscribe.getSendInfo());
								//fileNameStrings = null;
								try {
									boolean sendFlag=MailSendPack.sendWorkBookEmailPack(sendmail, reportSubscribe.getSendDetails(), null, reportName);
									if(sendFlag){
										result.setSendState("成功");
									}else{
										result.setSendState("失败");
									}
									
								} catch (Exception e) {
									result.setSendState("失败");
									e.printStackTrace();
								}
							} else if ("2".equals(reportSubscribe.getSendDetails())) {
								// 发送内容
								try {
									boolean sendFlag=MailSendPack.sendWorkBookEmailPack(sendmail, reportSubscribe.getSendDetails(), fileNameStrings, reportName);
									if(sendFlag){
										result.setSendState("成功");
									}else{
										result.setSendState("失败");
									}
								} catch (Exception e) {
									result.setSendState("失败");
									e.printStackTrace();
								}
							}
							
						} catch (Exception e) {
							e.printStackTrace();
							result.setSendState("失败");
						}
						sendResultList.add(result);
					}

					// 存储发送结果
					Map<String, List<SendResult>> sendResultMap = new HashMap<>();
					sendResultMap.put(reportSubscribe.getReportId(), sendResultList);
					operDao.addReportResult(sendResultMap);

					// 修改仪表板主表数据
					reportSubscribe.setIsTodaySend("");
					reportSubscribe.setPtempSendTime(null);
					reportSubscribe.setUserId(Constants.USERID);
					//operDao.addReportResult(sendResultMap,reportSubscribe);
					operDao.updateReportSubscribeAfterSendEmail(reportSubscribe);
				}
			}
		}else{//如果tanleauserver仪表板数据未刷新，发送提示邮件
			
			ReportSubscribe tReportSubscribe=new ReportSubscribe();
			tReportSubscribe.setIsTodaySend("false");
			Long tnextSendTime=new Date().getTime();
			Long tempSendTime=tnextSendTime+Constants.TENMIN;
			tReportSubscribe.setPtempSendTime((Tools.getCurrFormatTimeday(new Date(tempSendTime))));
			tReportSubscribe.setReportId(reportSubscribe.getReportId());
			operDao.updateSendTimeSubscribe(tReportSubscribe);
			
			for (String email : reportSubscribe.getMailList()) {
				MailSenderInfo mailSenderInfo=new MailSenderInfo();
				mailSenderInfo.setToAddress(email);
				mailSenderInfo.setContent(reportSubscribe.getReportName()+"仪表板Tableau数据未更新，不发送该条信息");
				mailSenderInfo.setSubject(reportSubscribe.getMailTitle());
				MailSendPack.sendContentEmailPack(mailSenderInfo);
			}
		}
		
	}

	/**************************************************** excel ************************************************************/

	/**
	 * 
	 * 
	 * @throws Exception
	 * @author
	 */
	public String sendExcelEmailByManual(String tableId) throws Exception {
		Calendar nowDate = Calendar.getInstance();
		String resultStrExcel = "发送失败";
		 List<ExcelSubscribe> ExcelSubscribeList=excelDao.getExcelSubscribeList("");
		 logger.info("数据库中有"+ExcelSubscribeList.size()+"个excel报表");
		 for (int i = 0; i < ExcelSubscribeList.size(); i++) {
			 ExcelSubscribe es =new ExcelSubscribe();
			 es=ExcelSubscribeList.get(i);
			if (tableId.equals(es.getTableId())) {
				logger.debug("-----if----------开始");
				if (es.getNextTime() == null) {// 时间格式不对，没有成功设置发送时间
					continue;
				}
				logger.debug("-----if----------结束");
				// 一分钟遍历一次
				if (SubscribeExcelType.once.getIndex().equals(
						es.getSendTypeExcel())
						&& es.getNextTime() != null) {
					isSendExcelMailReport(es);
					es.setNextTime(null);// 代表已执行完毕
					es.setSendStateExcel("已发送");
					resultStrExcel = "发送成功";
				} else if (SubscribeExcelType.day.getIndex().equals(
						es.getSendTypeExcel())
						&& nowDate.getTime().before(es.getNextTime())) {
					isSendExcelMailReport(es);
					nowDate.setTime(es.getNextTime());
					nowDate.add(Calendar.DATE, 1);
					es.setNextTime(nowDate.getTime());
					es.setSendStateExcel("已发送");
					resultStrExcel = "发送成功";
				} else if (SubscribeExcelType.week.getIndex().equals(
						es.getSendTypeExcel())
						&& nowDate.getTime().before(es.getNextTime())) {
					logger.debug("每周："
							+ SubscribeExcelType.week.getIndex()
							+ "；下次发送时间es.getNextTime()：" + es.getNextTime()
							+ "获取发送时间 es.getSendTimeExcel()："
							+ es.getSendTimeExcel());
					String[] strExcel = es.getSendTimeExcel().split("_");

					String[] dayxExcel = strExcel[0].split(",");
					logger.debug("dayxExcel.length长度是："
							+ dayxExcel.length + "内容是" + dayxExcel[0]);
					// 0->length-1
					// 获取今天是星期几
					Date dateExcel = new Date();
					SimpleDateFormat dateFmExcel = new SimpleDateFormat("EEEE");
					String daExcel = dateFmExcel.format(dateExcel);
					if (daExcel.equals("星期日")) {
						daExcel = "1";
					} else if (daExcel.equals("星期一")) {
						daExcel = "2";
					} else if (daExcel.equals("星期二")) {
						daExcel = "3";
					} else if (daExcel.equals("星期三")) {
						daExcel = "4";
					} else if (daExcel.equals("星期四")) {
						daExcel = "5";
					} else if (daExcel.equals("星期五")) {
						daExcel = "6";
					} else if (daExcel.equals("星期六")) {
						daExcel = "7";
					}

					int countWeekExcel = 0;
					int countWeekExcel0 = 0;
					int countWeekExcel1 = 0;
					int countWeekExcel2 = 0;
					int countWeekExcel3 = 0;
					int countWeekExcel4 = 0;
					int countWeekExcel5 = 0;

					// 满足发送条件
					isSendExcelMailReport(es);
					nowDate.setTime(es.getNextTime());
					// nowDate.add(Calendar.DATE,7);
					// 判断今天是否等于所选的发送星期
					for (int y = 0; y < dayxExcel.length; y++) {
						// 选定的星期等于今天
						if (dayxExcel[y].equals(daExcel)) {
							// 选择的天数的判断
							switch (dayxExcel.length) {
							case 1:
								// 选1天
								nowDate.add(Calendar.DATE, 7);
								break;
							case 2:
								// 选2天
								if (y == 0) {
									// 下标为0
									countWeekExcel0 = Integer
											.parseInt(dayxExcel[0]);
									countWeekExcel1 = Integer
											.parseInt(dayxExcel[1]);
									countWeekExcel = countWeekExcel1
											- countWeekExcel0;
									nowDate.add(Calendar.DATE, countWeekExcel);
								} else if (y == 1) {
									// 下标为1
									countWeekExcel0 = Integer
											.parseInt(dayxExcel[0]);
									countWeekExcel1 = Integer
											.parseInt(dayxExcel[1]);
									countWeekExcel = countWeekExcel0 + 7
											- countWeekExcel1;
									nowDate.add(Calendar.DATE, countWeekExcel);
								}
								break;
							case 3:
								// 选3天
								if (y == 0) {
									// 下标为0
									countWeekExcel0 = Integer
											.parseInt(dayxExcel[0]);
									countWeekExcel1 = Integer
											.parseInt(dayxExcel[1]);
									countWeekExcel = countWeekExcel1
											- countWeekExcel0;
									nowDate.add(Calendar.DATE, countWeekExcel);
								} else if (y == 1) {
									// 下标为1
									countWeekExcel1 = Integer
											.parseInt(dayxExcel[1]);
									countWeekExcel2 = Integer
											.parseInt(dayxExcel[2]);
									countWeekExcel = countWeekExcel2
											- countWeekExcel1;
									nowDate.add(Calendar.DATE, countWeekExcel);
								} else if (y == 2) {
									// 下标为2
									countWeekExcel0 = Integer
											.parseInt(dayxExcel[0]);
									countWeekExcel2 = Integer
											.parseInt(dayxExcel[2]);
									countWeekExcel = countWeekExcel0 + 7
											- countWeekExcel2;
									nowDate.add(Calendar.DATE, countWeekExcel);
								}
								break;
							case 4:
								// 选4天
								if (y == 0) {
									// 下标为0
									countWeekExcel0 = Integer
											.parseInt(dayxExcel[0]);
									countWeekExcel1 = Integer
											.parseInt(dayxExcel[1]);
									countWeekExcel = countWeekExcel1
											- countWeekExcel0;
									nowDate.add(Calendar.DATE, countWeekExcel);
								} else if (y == 1) {
									// 下标为1
									countWeekExcel1 = Integer
											.parseInt(dayxExcel[1]);
									countWeekExcel2 = Integer
											.parseInt(dayxExcel[2]);
									countWeekExcel = countWeekExcel2
											- countWeekExcel1;
									nowDate.add(Calendar.DATE, countWeekExcel);
								} else if (y == 2) {
									// 下标为2
									countWeekExcel2 = Integer
											.parseInt(dayxExcel[2]);
									countWeekExcel3 = Integer
											.parseInt(dayxExcel[3]);
									countWeekExcel = countWeekExcel3
											- countWeekExcel2;
									nowDate.add(Calendar.DATE, countWeekExcel);
								} else if (y == 3) {
									// 下标为3
									countWeekExcel0 = Integer
											.parseInt(dayxExcel[0]);
									countWeekExcel3 = Integer
											.parseInt(dayxExcel[3]);
									countWeekExcel = countWeekExcel0 + 7
											- countWeekExcel3;
									nowDate.add(Calendar.DATE, countWeekExcel);
								}
								break;
							case 5:
								// 选5天
								if (y == 0) {
									// 下标为0
									countWeekExcel0 = Integer
											.parseInt(dayxExcel[0]);
									countWeekExcel1 = Integer
											.parseInt(dayxExcel[1]);
									countWeekExcel = countWeekExcel1
											- countWeekExcel0;
									nowDate.add(Calendar.DATE, countWeekExcel);
								} else if (y == 1) {
									// 下标为1
									countWeekExcel1 = Integer
											.parseInt(dayxExcel[1]);
									countWeekExcel2 = Integer
											.parseInt(dayxExcel[2]);
									countWeekExcel = countWeekExcel2
											- countWeekExcel1;
									nowDate.add(Calendar.DATE, countWeekExcel);
								} else if (y == 2) {
									// 下标为2
									countWeekExcel2 = Integer
											.parseInt(dayxExcel[2]);
									countWeekExcel3 = Integer
											.parseInt(dayxExcel[3]);
									countWeekExcel = countWeekExcel3
											- countWeekExcel2;
									nowDate.add(Calendar.DATE, countWeekExcel);
								} else if (y == 3) {
									// 下标为3
									countWeekExcel3 = Integer
											.parseInt(dayxExcel[3]);
									countWeekExcel4 = Integer
											.parseInt(dayxExcel[4]);
									countWeekExcel = countWeekExcel4
											- countWeekExcel3;
									nowDate.add(Calendar.DATE, countWeekExcel);
								} else if (y == 4) {
									// 下标为4
									countWeekExcel0 = Integer
											.parseInt(dayxExcel[0]);
									countWeekExcel4 = Integer
											.parseInt(dayxExcel[4]);
									countWeekExcel = countWeekExcel0 + 7
											- countWeekExcel4;
									nowDate.add(Calendar.DATE, countWeekExcel);
								}
								break;
							case 6:
								// 选6天
								if (y == 0) {
									// 下标为0
									countWeekExcel0 = Integer
											.parseInt(dayxExcel[0]);
									countWeekExcel1 = Integer
											.parseInt(dayxExcel[1]);
									countWeekExcel = countWeekExcel1
											- countWeekExcel0;
									nowDate.add(Calendar.DATE, countWeekExcel);
								} else if (y == 1) {
									// 下标为1
									countWeekExcel1 = Integer
											.parseInt(dayxExcel[1]);
									countWeekExcel2 = Integer
											.parseInt(dayxExcel[2]);
									countWeekExcel = countWeekExcel2
											- countWeekExcel1;
									nowDate.add(Calendar.DATE, countWeekExcel);
								} else if (y == 2) {
									// 下标为2
									countWeekExcel2 = Integer
											.parseInt(dayxExcel[2]);
									countWeekExcel3 = Integer
											.parseInt(dayxExcel[3]);
									countWeekExcel = countWeekExcel3
											- countWeekExcel2;
									nowDate.add(Calendar.DATE, countWeekExcel);
								} else if (y == 3) {
									// 下标为3
									countWeekExcel3 = Integer
											.parseInt(dayxExcel[3]);
									countWeekExcel4 = Integer
											.parseInt(dayxExcel[4]);
									countWeekExcel = countWeekExcel4
											- countWeekExcel3;
									nowDate.add(Calendar.DATE, countWeekExcel);
								} else if (y == 4) {
									// 下标为4
									countWeekExcel4 = Integer
											.parseInt(dayxExcel[4]);
									countWeekExcel5 = Integer
											.parseInt(dayxExcel[5]);
									countWeekExcel = countWeekExcel5
											- countWeekExcel4;
									nowDate.add(Calendar.DATE, countWeekExcel);
								} else if (y == 5) {
									// 下标为5
									countWeekExcel0 = Integer
											.parseInt(dayxExcel[0]);
									countWeekExcel5 = Integer
											.parseInt(dayxExcel[5]);
									countWeekExcel = countWeekExcel0 + 7
											- countWeekExcel5;
									nowDate.add(Calendar.DATE, countWeekExcel);
								}
								break;
							case 7:
								// 选7天
								nowDate.add(Calendar.DATE, 1);
								break;
							}
						}
					}

					es.setNextTime(nowDate.getTime());
					es.setSendStateExcel("已发送");
					resultStrExcel = "发送成功";
					// }

				} else if (SubscribeExcelType.month.getIndex().equals(
						es.getSendTypeExcel())
						&& nowDate.getTime().before(es.getNextTime())) {
					////logger.debug("-----------EmailTask --------------------------------一月遍历一次");
					isSendExcelMailReport(es);
					nowDate.setTime(es.getNextTime());
					nowDate.add(Calendar.MONTH, 1);
					es.setNextTime(nowDate.getTime());
					es.setSendStateExcel("已发送");
					resultStrExcel = "发送成功";
				} else if (SubscribeExcelType.year.getIndex().equals(
						es.getSendTypeExcel())
						&& nowDate.getTime().before(es.getNextTime())) {
					////logger.debug("-----------EmailTask --------------------------------一年遍历一次");
					isSendExcelMailReport(es);
					nowDate.setTime(es.getNextTime());
					nowDate.add(Calendar.YEAR, 1);
					es.setNextTime(nowDate.getTime());
					es.setSendStateExcel("已发送");
					resultStrExcel = "发送成功";
				}
			}
		}
		return resultStrExcel;
	}

	/**
	 * 
	 * 
	 * @throws Exception
	 */
	private void sendExcelEmail() throws Exception {
		Calendar nowDate = Calendar.getInstance();
		// -----------------------遍历配置信息：是否需要发送邮件(时间类型、规则)------------------------------------------------//
		
		 List<ExcelSubscribe> excelSubscribeList=excelDao.getExcelSubscribeList("");
		 logger.info("数据库中有"+excelSubscribeList.size()+"个excel报表");
		 for (int i = 0; i < excelSubscribeList.size(); i++) {
			
			 ExcelSubscribe es =new ExcelSubscribe();
			 es=excelSubscribeList.get(i);
			//当天临时发送的时间和当前时间的时间差，当天数据未到位时，会给这个字段赋值，其他情况暂不赋值
			 long d2 =0L;
			 if(es.getTempSendTime()!=null){
				 d2 = es.getTempSendTime().getTime()- nowDate.getTime().getTime(); 
			 }
			
			 logger.info("正在循环第"+i+"个excel报表！");
		 //for (ExcelSubscribe es : InitExcelSubscribeConfig.excelSubscribeConfig) {
			if (es.getNextTime() == null) {// 时间格式不对，没有成功设置发送时间
				continue;
			}
			// 一分钟遍历一次
			if (SubscribeExcelType.once.getIndex()
					.equals(es.getSendTypeExcel()) && es.getNextTime() != null) {
				long dExcel = es.getNextTime().getTime()
						- nowDate.getTime().getTime();
				// 提前一分钟发邮件2分钟 记录下次时间(必须),以防被遗漏
				if (dExcel <= 2 * 60 * 1000 && dExcel > 0) {
					// 满足发送条件
					isSendExcelMailReport(es);
					es.setNextTime(null);// 代表已执行完毕
					es.setSendStateExcel("已发送");
				}
				//
			} /*else if (SubscribeExcelType.day.getIndex().equals(
					es.getSendTypeExcel())
					&& nowDate.getTime().before(es.getNextTime())) {
				long dExcel = es.getNextTime().getTime()
						- nowDate.getTime().getTime();
				logger.debug("发送时间=" + dateSdf.format(es.getNextTime())
						+ "--当前时间=" + dateSdf.format(nowDate.getTime()));
				if (dExcel <= 2 * 60 * 1000 && dExcel > 0) {
					// 满足发送条件
					isSendExcelMailReport(es);
					nowDate.setTime(es.getNextTime());
					nowDate.add(Calendar.DATE, 1);
					es.setNextTime(nowDate.getTime());
					es.setSendStateExcel("已发送");
				}
			} */else if (SubscribeExcelType.day.getIndex().equals(es.getSendTypeExcel())){
				if(nowDate.getTime().before(es.getNextTime())){
					long dExcel = es.getNextTime().getTime()
							- nowDate.getTime().getTime();
					logger.debug("发送时间=" + dateSdf.format(es.getNextTime())
							+ "--当前时间=" + dateSdf.format(nowDate.getTime()));
					if (dExcel <= 2 * 60 * 1000 && dExcel > 0) {
						// 满足发送条件
						isSendExcelMailReport(es);
						nowDate.setTime(es.getNextTime());
						nowDate.add(Calendar.DATE, 1);
						es.setNextTime(nowDate.getTime());
						es.setSendStateExcel("已发送");
					}
				}
				if((Tools.getCurrFormatTimeDay(nowDate.getTime()).equals(Tools.getCurrFormatTimeDay(es.getTempSendTime()))) 
						&&
					 ("false".equals(es.getIsTodaySend()))
					 	&&
					 (d2 <= 2 * 60 * 1000 && d2 > 0)
					 ){
				//如果当前时间和下次发送的时间是同一天。并且当天没有按照用户的规则发送数据，并且该报表当天下次临时发送时间和当前时间差为2分钟
					isSendExcelMailReport(es);
					es.setSendStateExcel("已发送");
				
				}
			} else if (SubscribeExcelType.week.getIndex().equals(es.getSendTypeExcel())){
				if(nowDate.getTime().before(es.getNextTime())){
					logger.debug("每周：" + SubscribeExcelType.week.getIndex()
							+ "；下次发送时间es.getNextTime()：" + es.getNextTime()
							+ "获取发送时间 es.getSendTime()：" + es.getSendTimeExcel());
					String[] strExcel = es.getSendTimeExcel().split("_");
	
					String[] dayxExcel = strExcel[0].split(",");
					logger.debug("dayx.length长度是：" + dayxExcel.length + "内容是"
							+ dayxExcel[0]);
					// 0->length-1
					// 获取今天是星期几
					Date dateExcel = new Date();
					SimpleDateFormat dateFmExcel = new SimpleDateFormat("EEEE");
					String daExcel = dateFmExcel.format(dateExcel);
					if (daExcel.equals("星期日")) {
						daExcel = "1";
					} else if (daExcel.equals("星期一")) {
						daExcel = "2";
					} else if (daExcel.equals("星期二")) {
						daExcel = "3";
					} else if (daExcel.equals("星期三")) {
						daExcel = "4";
					} else if (daExcel.equals("星期四")) {
						daExcel = "5";
					} else if (daExcel.equals("星期五")) {
						daExcel = "6";
					} else if (daExcel.equals("星期六")) {
						daExcel = "7";
					}
	
					int countWeekExcel = 0;
					int countWeekExcel0 = 0;
					int countWeekExcel1 = 0;
					int countWeekExcel2 = 0;
					int countWeekExcel3 = 0;
					int countWeekExcel4 = 0;
					int countWeekExcel5 = 0;
	
					long dExcel = es.getNextTime().getTime()
							- nowDate.getTime().getTime();
					if (dExcel <= 2 * 60 * 1000 && dExcel > 0) {
						// 满足发送条件
						isSendExcelMailReport(es);
						nowDate.setTime(es.getNextTime());
						// nowDate.add(Calendar.DATE,7);
						// 判断今天是否等于所选的发送星期
						for (int y = 0; y < dayxExcel.length; y++) {
							// 选定的星期等于今天
							if (dayxExcel[y].equals(daExcel)) {
								// 选择的天数的判断
								switch (dayxExcel.length) {
								case 1:
									// 选1天
									nowDate.add(Calendar.DATE, 7);
									break;
								case 2:
									// 选2天
									if (y == 0) {
										// 下标为0
										countWeekExcel0 = Integer
												.parseInt(dayxExcel[0]);
										countWeekExcel1 = Integer
												.parseInt(dayxExcel[1]);
										countWeekExcel = countWeekExcel1
												- countWeekExcel0;
										nowDate.add(Calendar.DATE, countWeekExcel);
									} else if (y == 1) {
										// 下标为1
										countWeekExcel0 = Integer
												.parseInt(dayxExcel[0]);
										countWeekExcel1 = Integer
												.parseInt(dayxExcel[1]);
										countWeekExcel = countWeekExcel0 + 7
												- countWeekExcel1;
										nowDate.add(Calendar.DATE, countWeekExcel);
									}
									break;
								case 3:
									// 选3天
									if (y == 0) {
										// 下标为0
										countWeekExcel0 = Integer
												.parseInt(dayxExcel[0]);
										countWeekExcel1 = Integer
												.parseInt(dayxExcel[1]);
										countWeekExcel = countWeekExcel1
												- countWeekExcel0;
										nowDate.add(Calendar.DATE, countWeekExcel);
									} else if (y == 1) {
										// 下标为1
										countWeekExcel1 = Integer
												.parseInt(dayxExcel[1]);
										countWeekExcel2 = Integer
												.parseInt(dayxExcel[2]);
										countWeekExcel = countWeekExcel2
												- countWeekExcel1;
										nowDate.add(Calendar.DATE, countWeekExcel);
									} else if (y == 2) {
										// 下标为2
										countWeekExcel0 = Integer
												.parseInt(dayxExcel[0]);
										countWeekExcel2 = Integer
												.parseInt(dayxExcel[2]);
										countWeekExcel = countWeekExcel0 + 7
												- countWeekExcel2;
										nowDate.add(Calendar.DATE, countWeekExcel);
									}
									break;
								case 4:
									// 选4天
									if (y == 0) {
										// 下标为0
										countWeekExcel0 = Integer
												.parseInt(dayxExcel[0]);
										countWeekExcel1 = Integer
												.parseInt(dayxExcel[1]);
										countWeekExcel = countWeekExcel1
												- countWeekExcel0;
										nowDate.add(Calendar.DATE, countWeekExcel);
									} else if (y == 1) {
										// 下标为1
										countWeekExcel1 = Integer
												.parseInt(dayxExcel[1]);
										countWeekExcel2 = Integer
												.parseInt(dayxExcel[2]);
										countWeekExcel = countWeekExcel2
												- countWeekExcel1;
										nowDate.add(Calendar.DATE, countWeekExcel);
									} else if (y == 2) {
										// 下标为2
										countWeekExcel2 = Integer
												.parseInt(dayxExcel[2]);
										countWeekExcel3 = Integer
												.parseInt(dayxExcel[3]);
										countWeekExcel = countWeekExcel3
												- countWeekExcel2;
										nowDate.add(Calendar.DATE, countWeekExcel);
									} else if (y == 3) {
										// 下标为3
										countWeekExcel0 = Integer
												.parseInt(dayxExcel[0]);
										countWeekExcel3 = Integer
												.parseInt(dayxExcel[3]);
										countWeekExcel = countWeekExcel0 + 7
												- countWeekExcel3;
										nowDate.add(Calendar.DATE, countWeekExcel);
									}
									break;
								case 5:
									// 选5天
									if (y == 0) {
										// 下标为0
										countWeekExcel0 = Integer
												.parseInt(dayxExcel[0]);
										countWeekExcel1 = Integer
												.parseInt(dayxExcel[1]);
										countWeekExcel = countWeekExcel1
												- countWeekExcel0;
										nowDate.add(Calendar.DATE, countWeekExcel);
									} else if (y == 1) {
										// 下标为1
										countWeekExcel1 = Integer
												.parseInt(dayxExcel[1]);
										countWeekExcel2 = Integer
												.parseInt(dayxExcel[2]);
										countWeekExcel = countWeekExcel2
												- countWeekExcel1;
										nowDate.add(Calendar.DATE, countWeekExcel);
									} else if (y == 2) {
										// 下标为2
										countWeekExcel2 = Integer
												.parseInt(dayxExcel[2]);
										countWeekExcel3 = Integer
												.parseInt(dayxExcel[3]);
										countWeekExcel = countWeekExcel3
												- countWeekExcel2;
										nowDate.add(Calendar.DATE, countWeekExcel);
									} else if (y == 3) {
										// 下标为3
										countWeekExcel3 = Integer
												.parseInt(dayxExcel[3]);
										countWeekExcel4 = Integer
												.parseInt(dayxExcel[4]);
										countWeekExcel = countWeekExcel4
												- countWeekExcel3;
										nowDate.add(Calendar.DATE, countWeekExcel);
									} else if (y == 4) {
										// 下标为4
										countWeekExcel0 = Integer
												.parseInt(dayxExcel[0]);
										countWeekExcel4 = Integer
												.parseInt(dayxExcel[4]);
										countWeekExcel = countWeekExcel0 + 7
												- countWeekExcel4;
										nowDate.add(Calendar.DATE, countWeekExcel);
									}
									break;
								case 6:
									// 选6天
									if (y == 0) {
										// 下标为0
										countWeekExcel0 = Integer
												.parseInt(dayxExcel[0]);
										countWeekExcel1 = Integer
												.parseInt(dayxExcel[1]);
										countWeekExcel = countWeekExcel1
												- countWeekExcel0;
										nowDate.add(Calendar.DATE, countWeekExcel);
									} else if (y == 1) {
										// 下标为1
										countWeekExcel1 = Integer
												.parseInt(dayxExcel[1]);
										countWeekExcel2 = Integer
												.parseInt(dayxExcel[2]);
										countWeekExcel = countWeekExcel2
												- countWeekExcel1;
										nowDate.add(Calendar.DATE, countWeekExcel);
									} else if (y == 2) {
										// 下标为2
										countWeekExcel2 = Integer
												.parseInt(dayxExcel[2]);
										countWeekExcel3 = Integer
												.parseInt(dayxExcel[3]);
										countWeekExcel = countWeekExcel3
												- countWeekExcel2;
										nowDate.add(Calendar.DATE, countWeekExcel);
									} else if (y == 3) {
										// 下标为3
										countWeekExcel3 = Integer
												.parseInt(dayxExcel[3]);
										countWeekExcel4 = Integer
												.parseInt(dayxExcel[4]);
										countWeekExcel = countWeekExcel4
												- countWeekExcel3;
										nowDate.add(Calendar.DATE, countWeekExcel);
									} else if (y == 4) {
										// 下标为4
										countWeekExcel4 = Integer
												.parseInt(dayxExcel[4]);
										countWeekExcel5 = Integer
												.parseInt(dayxExcel[5]);
										countWeekExcel = countWeekExcel5
												- countWeekExcel4;
										nowDate.add(Calendar.DATE, countWeekExcel);
									} else if (y == 5) {
										// 下标为5
										countWeekExcel0 = Integer
												.parseInt(dayxExcel[0]);
										countWeekExcel5 = Integer
												.parseInt(dayxExcel[5]);
										countWeekExcel = countWeekExcel0 + 7
												- countWeekExcel5;
										nowDate.add(Calendar.DATE, countWeekExcel);
									}
									break;
								case 7:
									// 选7天
									nowDate.add(Calendar.DATE, 1);
									break;
								}
							}
						}
	
						es.setNextTime(nowDate.getTime());
						es.setSendStateExcel("已发送");
					}
				}
				if((Tools.getCurrFormatTimeDay(nowDate.getTime()).equals(Tools.getCurrFormatTimeDay(es.getTempSendTime()))) 
						&&
					 ("false".equals(es.getIsTodaySend()))
					 	&&
					 (d2 <= 2 * 60 * 1000 && d2 > 0)
					 ){
				//如果当前时间和下次发送的时间是同一天。并且当天没有按照用户的规则发送数据，并且该报表当天下次临时发送时间和当前时间差为2分钟
					isSendExcelMailReport(es);
					es.setSendStateExcel("已发送");
				}
			} else if (SubscribeExcelType.month.getIndex().equals(es.getSendTypeExcel())){
				if(nowDate.getTime().before(es.getNextTime())){
					long dExcel = es.getNextTime().getTime()
							- nowDate.getTime().getTime();
					if (dExcel <= 2 * 60 * 1000 && dExcel > 0) {
						// 满足发送条件
						isSendExcelMailReport(es);
						nowDate.setTime(es.getNextTime());
						nowDate.add(Calendar.MONTH, 1);
						es.setNextTime(nowDate.getTime());
						es.setSendStateExcel("已发送");
					}
				}
				if((Tools.getCurrFormatTimeDay(nowDate.getTime()).equals(Tools.getCurrFormatTimeDay(es.getTempSendTime()))) 
						&&
					 ("false".equals(es.getIsTodaySend()))
					 	&&
					 (d2 <= 2 * 60 * 1000 && d2 > 0)
					 ){
				//如果当前时间和下次发送的时间是同一天。并且当天没有按照用户的规则发送数据，并且该报表当天下次临时发送时间和当前时间差为2分钟
					isSendExcelMailReport(es);
					es.setSendStateExcel("已发送");
				}
				
			} else if (SubscribeExcelType.year.getIndex().equals(es.getSendTypeExcel())){
				if(nowDate.getTime().before(es.getNextTime())){
					long dExcel = es.getNextTime().getTime()
							- nowDate.getTime().getTime();
					if (dExcel <= 2 * 60 * 1000 && dExcel > 0) {
						// 满足发送条件
						isSendExcelMailReport(es);
						nowDate.setTime(es.getNextTime());
						nowDate.add(Calendar.YEAR, 1);
						es.setNextTime(nowDate.getTime());
						es.setSendStateExcel("已发送");

					}
				}
				if((Tools.getCurrFormatTimeDay(nowDate.getTime()).equals(Tools.getCurrFormatTimeDay(es.getTempSendTime()))) 
						&&
					 ("false".equals(es.getIsTodaySend()))
					 	&&
					 (d2 <= 2 * 60 * 1000 && d2 > 0)
					 ){
				//如果当前时间和下次发送的时间是同一天。并且当天没有按照用户的规则发送数据，并且该报表当天下次临时发送时间和当前时间差为2分钟
					isSendExcelMailReport(es);
					es.setSendStateExcel("已发送");
				}
			}
		}
	}

	/**
	 * 
	 * 附件：excel文件
	 * 
	 * @param reportSubscribe
	 *            订阅规则配置
	 * @throws Exception
	 */
	public String isSendExcelMailReport(final ExcelSubscribe excelSubscribe)
			throws Exception {
		logger.debug("~~~~~~~~~~~~~~~~发邮件~~~~~~~~~~~~~~~~~~~~~~~~~~");
		String resultExcel = "发送失败！";
		Vector<ExcelSubscribe> listExcelSubscribe = new Vector<ExcelSubscribe>();
		listExcelSubscribe.add(excelSubscribe);
		if (listExcelSubscribe != null && listExcelSubscribe.size() > 0) {
			////logger.debug("-----------EmailTask------------isSendExcelMailReport------------邮件推送：" + excelSubscribe);
			executor.execute(new Runnable() {
				@Override
				public void run() {
					try {
						sendExcel(excelSubscribe);
						// sendZipMail(reportList, reportSubscribe);
					} catch (Exception e) {
						e.printStackTrace();
					}
					logger.debug("~~~~~~~~~~~~~~~send~Excel~end~~~~~~~~~~~~~~~~~~~~~~~~~~");
				}

			});
			resultExcel = "发送成功！";
		}
		// }
		return resultExcel;
	}

	/**
	 * 发送Excel附件
	 * */
	private void sendExcel(ExcelSubscribe excelSubscribe) throws Exception {
		int sendExcel = 0;
		String donotSendRes="";
		String excelPath = "";
		//先把excel导出到本地，再发送出去
		String excelFilePath = PropertiesConfig.EXCEL_PATH;
		
		logger.info("存储的excel地址是："+excelFilePath);
		logger.debug("满足条件");
		String screening = excelSubscribe.getScreening();
		//判断条件 当日跑批是否完成
		SendExcelOper seoper=new SendExcelOper();
		sendExcel = seoper.sendExcel(excelSubscribe);
		if(sendExcel>0 || "1".equals(screening)){
			//当天跑批有数据 或者无筛选条件
			logger.debug("当天数据已到，准备发送该条信息");
			try {
				// 导入导出excel
				logger.debug("正在导出，请稍候……");
				Map<String,String> map=eoper.exportData(excelFilePath,excelSubscribe);
				for (String key : map.keySet()) {
					if(key.equals("info")){
						donotSendRes=map.get(key);
						logger.debug("数据量过大，需要发邮件提示：");
						for (String emailExcel : excelSubscribe.getMailListExcel()) {
							MailSenderInfo mailSenderInfo=new MailSenderInfo();
							mailSenderInfo.setToAddress(emailExcel);
							mailSenderInfo.setContent(donotSendRes);
							mailSenderInfo.setSubject("提示信息");
							MailSendPack.sendContentEmailPack(mailSenderInfo);
						}
						
					}else if(key.equals("path")){
						excelPath=map.get(key);
						logger.debug("导出完成，路径是："+excelPath);
					}
				  }
				
			} catch (Exception e) {
				logger.debug("失败，原因如下：");
				e.printStackTrace();
			}
			List<SendExcelResult> sendExcelResultList = new ArrayList<>();
			SendExcelResult resultExcel = new SendExcelResult();
			// 多个邮箱
			//resultExcel.setTableId(excelSubscribe.getTableId());
			for (String emailExcel : excelSubscribe.getMailListExcel()) {
				resultExcel = new SendExcelResult();
				resultExcel.setTableId(excelSubscribe.getTableId());
				resultExcel.setEmailId(emailExcel);
				logger.debug("tableId" + resultExcel.getTableId()+"-------------emailExcel：" + emailExcel);
				resultExcel.setSendTimeExcel(dateSdf.format(new Date()));
				resultExcel.setSendStateExcel("失败");
				try {
					MailUtils sendmail = new MailUtils();
					sendmail.setTo(emailExcel);
					
					if(Tools.isNotEmpty(donotSendRes)){
						sendmail.setContent(donotSendRes);
					}else if(Tools.isNotEmpty(excelPath)){
						sendmail.attachfile(excelPath);
					}
					
					sendmail.setHost(MailConstants.MAILHOST);
					sendmail.setUserName(MailConstants.USERNAME);
					sendmail.setPassWord(MailConstants.PASSWORD);
					
					
					// 设置邮件消息的发送者
					String nick = "";
					try {
						nick = javax.mail.internet.MimeUtility.encodeText("移动金融部");
					} catch (UnsupportedEncodingException e) {
						e.printStackTrace();
					}
					sendmail.setFrom(nick + "<" + MailConstants.MAILADDRESS + ">");
					String subject=javax.mail.internet.MimeUtility.encodeText(excelSubscribe.getMailTitleExcel());
					sendmail.setSubject(subject);
					
					sendmail.sendExcel();
					
					resultExcel.setSendStateExcel("成功");
				} catch (Exception e) {
					resultExcel.setSendStateExcel("失败");
					e.printStackTrace();
				}
				sendExcelResultList.add(resultExcel);
			}
			
			logger.info("------结果查看------sendExcelResultList："+sendExcelResultList);
			// 存储发送excel结果到数据库中
			excelDao.dropSendExcelResult(excelSubscribe.getTableId());
			Map<String, List<SendExcelResult>> sendExcelResultMap = new HashMap<>();
			sendExcelResultMap.put(excelSubscribe.getTableId(), sendExcelResultList);
			excelDao.addExcelSubscribeResult(sendExcelResultMap);
			logger.info("------结果查看------sendExcelResultList："+sendExcelResultList);
			
			//修改主表
			//TODO，生产需要修改主表
			excelSubscribe.setIsTodaySend("");
			excelSubscribe.setPtempSendTime(null);
			excelSubscribe.setUserId(Constants.USERID);
			excelDao.updateExcelSubscribe(excelSubscribe);
		}else{
			
			for (String emailExcel : excelSubscribe.getMailListExcel()) {
				
				MailSenderInfo mailSenderInfo=new MailSenderInfo();
				mailSenderInfo.setToAddress(emailExcel);
				mailSenderInfo.setContent(excelSubscribe.getTableId()+","+excelSubscribe.getTableName()+"暂无当天数据，不发送excel附件！");
				mailSenderInfo.setSubject("提示信息");
				MailSendPack.sendContentEmailPack(mailSenderInfo);
			}
			
			//如果数据不更新将当天发送失败、当天下次发送时间存储到数据库中，下次执行定时任务时依据当天下次发送时间来判断
			ExcelSubscribe tExcelSubscribe=new ExcelSubscribe();
			tExcelSubscribe.setIsTodaySend("false");
			Long tnextSendTime=tExcelSubscribe.getNextTime().getTime();
			Long tempSendTime=tnextSendTime+Constants.TENMIN;
			tExcelSubscribe.setPtempSendTime((Tools.getCurrFormatTimeday(new Date(tempSendTime))));
			excelDao.updateSendTimeExcelSubscribe(tExcelSubscribe);
			
			logger.debug("当天数据未到，不能发送该条信息");
		}

	}
	/**************************************************** excel end ************************************************************/
}
