package byit.tableausubscribe.tab.service;

import java.awt.Color;
import java.io.File;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.sql.Connection;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Vector;

import org.apache.log4j.Logger;
import org.apache.poi.ss.usermodel.DataFormat;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFDataFormat;
import org.apache.poi.xssf.usermodel.XSSFColor;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFRichTextString;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.dom4j.Document;
import org.dom4j.Element;
import org.dom4j.io.SAXReader;
import org.openxmlformats.schemas.wordprocessingml.x2006.main.STString;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import byit.tableausubscribe.common.util.Constants;
import byit.tableausubscribe.tab.bean.ExcelColumnSubscribe;
import byit.tableausubscribe.tab.bean.ExcelSubscribe;
import byit.tableausubscribe.tab.dao.BankDao;
import byit.tableausubscribe.tab.dao.PushExcelColumnDao;
import byit.tableausubscribe.tab.dao.PushReportDao;
import byit.tableausubscribe.tab.db.DBConnection;
import byit.tableausubscribe.tab.db.DbSql;


/*@Service
@Transactional*/
public class SendExcelOper {
	private static final Logger logger = Logger.getLogger(SendExcelOper.class);
	
	/*@Autowired
	private PushExcelColumnDao excelColumnDao;*/
	
	public static int sendExcel(ExcelSubscribe excelSubscribe) throws Exception{
		Connection conn = null;
		if (conn == null) {
			try {
				conn = DBConnection.getConnection();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		
		PushExcelColumnDao excelColumnDao=new PushExcelColumnDao();
		int sendExcel = 0;
		String sendExcelString = "";
		List excelList = new ArrayList();//excel表
		Map excelMap = new HashMap();//excel表
		String screening = excelSubscribe.getScreening();
		String tableId = excelSubscribe.getTableId();
		String[] tableIdList = tableId.split(",");
		String isCheckedString = "";
		List<ExcelColumnSubscribe> excelColSubscribeList=excelColumnDao.getExcelSubscribeById(tableId);
		String isChecked = "";
		for (int i = 0; i < excelColSubscribeList.size(); i++) {
			isChecked=excelColSubscribeList.get(i).getIsChecked();
			isCheckedString=isCheckedString+"~"+isChecked;
		}
		isCheckedString = isCheckedString.substring(1,isCheckedString.length());
		String[] isCheckedArray =  isCheckedString.split("~");
		
		if("3".equals(screening) || "4".equals(screening) || "5".equals(screening) || "6".equals(screening)  || "7".equals(screening) || "8".equals(screening) ){
			String screeningExcel = "";
			if("3".equals(screening)){
				screeningExcel = "bi_chk_account_end";
			}else if("4".equals(screening)){
				screeningExcel = "bi_end_check";
			}else if("5".equals(screening)){
				screeningExcel = "bi_cl_end_check";
			}else if("6".equals(screening)){
				screeningExcel = "bi_on_end_check";
			}else if("7".equals(screening)){
				screeningExcel = "bi_cuishou_end_check";
			}else if("8".equals(screening)){
				screeningExcel = "bi_ear_end_check";
			}
			//String excelSql="select count(*) as count from comm.comm_rpt_end_check where node = '"+screeningExcel+"' and to_char(currdt,'yyyy-mm-dd') = to_char(sysdate-1,'yyyy-mm-dd')";
			//TODO。上线后需要使用上面的sql语句，bi_cuishou_end_check，bi_ear_end_check测试库中无数据
			String excelSql="select count(*) as count from comm.comm_rpt_end_check where node = '"+screeningExcel+"' and to_char(currdt,'yyyy-mm-dd') = to_char(sysdate-154,'yyyy-mm-dd')";
			//System.out.println("-----------------excelSql-----------------"+excelSql);
			excelList = DbSql.findNativeSQL(conn, excelSql, null);
			System.out.println("excelList："+excelList);
			for(int i=0;i<excelList.size();i++){
				excelMap = (Map) excelList.get(i);
				sendExcelString = String.valueOf(excelMap.get("count"));
			}
			sendExcel = Integer.parseInt(sendExcelString);
		}else if("2".equals(screening)) {
			for(int t=0;t<tableIdList.length;t++){
				String[] isCheckedColumn = isCheckedArray[t].split(",");
				
				//存在前一日数据
				String excelSql="select count(*) as count from "+tableIdList[t]+" where to_char("+isCheckedColumn[0]+",'yyyy-mm-dd') = to_char(sysdate-1,'yyyy-mm-dd')";
				//System.out.println("-----------------excelSql-----------------"+excelSql);
				excelList = DbSql.findNativeSQL(conn, excelSql, null);
				System.out.println("excelList："+excelList);
				for(int i=0;i<excelList.size();i++){
					excelMap = (Map) excelList.get(i);
					sendExcelString = String.valueOf(excelMap.get("count"));
				}
				sendExcel = Integer.parseInt(sendExcelString);
				
				if(sendExcel == 0){
					//只要有一张表的数据显示前一天的数据未到 即跳出循环
					break;
				}
			}
		}
		
		//System.out.println("----------sendExcelString:"+sendExcelString+"-------------sendExcel:"+sendExcel);
		return sendExcel;
	}
//	public static void main(String[] args) throws Exception {		
//		int sendExcel = 0;
//		Connection conn = null;
//		if (conn == null) {
//			try {				
//				conn = DBConnection.getConnection();
//			} catch (Exception e) {
//				e.printStackTrace();
//			}
//		}
//		sendExcel = sendExcel(conn);
//		System.out.println("sendExcel："+sendExcel);
//		if(sendExcel>0){
//			//当天跑批有数据
//			System.out.println("有数据sendExcel"+sendExcel);
//		}else{
//			System.out.println("当天数据未到，不能发送该条信息");
//		}
//	}
}
