package byit.tableausubscribe.tab.service;


import java.sql.Connection;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import byit.osdp.base.security.UserHolder;
import byit.tableausubscribe.tab.bean.ExcelColumnSubscribe;
import byit.tableausubscribe.tab.bean.ExcelSubscribe;
import byit.tableausubscribe.tab.bean.SendExcelResult;
import byit.tableausubscribe.tab.bean.SubscribeExcelType;
import byit.tableausubscribe.tab.dao.PushExcelColumnDao;
import byit.tableausubscribe.tab.dao.PushExcelDao;
import byit.tableausubscribe.tab.db.DbSql;
import byit.tableausubscribe.tab.init.InitExcelColumnSubscribeConfig;
import byit.tableausubscribe.tab.init.InitExcelSubscribeConfig;
import byit.utils.Tools;



/** 
* Comments:操作XML文件---ok
*/
@Service
@Transactional
public class PushExcelService extends EmailTask{
	private static final Logger logger = Logger.getLogger(PushExcelService.class);

	
	@Autowired
	private PushExcelDao excelDao ;
	@Autowired
	private PushExcelColumnDao columnDao ;
	/*
	 * 获取订阅列表
	 */
	public List<ExcelSubscribe> getExcelSubscribeList(String searchValue){
		List<ExcelSubscribe> reusltSub = new ArrayList<>();
		reusltSub=excelDao.getExcelSubscribeList(searchValue);
		return reusltSub;
		
	}
	/*
	 * 添加订阅规则
	 */
	public String addExcelSubscribe(ExcelSubscribe excel) {
		String result = null;
		String id = excel.getTableId();
		if(id.endsWith(",")){
			excel.setTableId(id.substring(0, id.length()-1));
		}
		
		//不让填重复，类似表的唯一键
		ExcelSubscribe texcel=excelDao.getExcelSubscribeById(excel.getTableId());
		if(Tools.isNotEmpty(texcel.getTableId())){
			result="添加失败：该规则已存在！";
			return result;
		}
		
		 excel.setNextTime();
		 excel.setUserId(UserHolder.getId());
		 boolean flag=excelDao.addExcelSubscribe(excel);
		 if(flag){
			 result = "添加成功！";
		 }else{
			 result = "添加失败！";
		 }
		 logger.info("excel:"+excel+"");
		return result;
	}
	
	
	/*
	 * 查看邮件发送结果
	 */
	public String sendExcelEmail(String tableId){
		String result = "发送失败！";
		//发送邮件
		////logger.info("-----------表名："+tableId+"------------------------");
		try {
			result = this.sendExcelEmailByManual(tableId);
			////logger.info("-----------返回结果："+result+"------------------------");
		} catch (Exception e) {
			e.printStackTrace();
		}
		////logger.info("-----------这一步的result是什么呢？："+result+"------------------------");
		return result;
	}
	
	/*
	 * 获取订阅列表
	 */
	public ExcelSubscribe queryExcelSubscribe(String tableId){
		ExcelSubscribe excelSubscribe=excelDao.getExcelSubscribeById(tableId);
		return excelSubscribe;
	}
	
	
	/*
	 * 
	 */
	public List addColumnExcelSubscribe(Connection conn,String tableId){
		////logger.info("----------------addColumnExcelSubscribe-begin-------------------------");
		List excelColumnList = new ArrayList();
		Map excelColumnMap = new HashMap();
		List columnList = new ArrayList();
		//表字段英文名：columnEnName
		String excelColumnSql="SELECT A.COLUMN_NAME as columnEnName FROM USER_TAB_COLUMNS A WHERE A.TABLE_NAME = '"+tableId+"'";
		//System.out.println("-----------------excelColumnSql-----------------"+excelColumnSql);
		try {
			excelColumnList = DbSql.findNativeSQL(conn, excelColumnSql, null);
		} catch (Exception e) {
			System.out.println("查询失败");
			e.printStackTrace();
		}
		for(int i=0;i<excelColumnList.size();i++){
			excelColumnMap= (Map) excelColumnList.get(i);
			columnList.add(String.valueOf(excelColumnMap.get("columnenname")));
			//String.valueOf(excelColumnMap.get("columnCnName"));
		}
		////logger.info("----------------addColumnExcelSubscribe-end-------------------------");
		return columnList;
	}
	
	
	
	
	/*
	 * 更新订阅规则
	 * 
	 */
	public  String updateExcelSubscribe(ExcelSubscribe excel){
		////logger.info("----------------updateExcelSubscribe-begin-------------------------");
		String result = "修改成功！";
		try {
			String id = excel.getTableId();
			if(id.endsWith(",")){
				excel.setTableId(id.substring(0, id.length()-1));
			}
			excel.setNextTime();
			excel.setUserId(UserHolder.getId());
			excelDao.updateExcelSubscribe(excel);
			/*excelOper.deleteExcelConfig(excel.getTableId());
			excelOper.addExcelConfig(excel);*/
			List<ExcelSubscribe> esList = InitExcelSubscribeConfig.excelSubscribeConfig;
			for(ExcelSubscribe e:esList){
				if(e.getTableId().equals(excel.getTableId())){
					esList.remove(e);
					esList.add(excel);
					break;
				}
			}
		} catch (Exception e) {
			result="修改失败！";
			e.printStackTrace();
		}
		return result;
	}
	
	private void deleteSendExcelResult(String tableId) throws Exception{
		//excelOper.deleteSendExcelResult(tableId);
		excelDao.dropSendExcelResult(tableId);
		//InitExcelSubscribeConfig.sendExcelResultConfig.remove(InitExcelSubscribeConfig.sendExcelResultConfig.get(tableId));
	}
	
	public  void  deleteExcelColumnSubscribe( String tableId) throws Exception  {
		//columnOper.deleteExcelColumnSubscribe(tableId);
		//InitExcelColumnSubscribeConfig.excelColumnSubscribe.remove(InitExcelColumnSubscribeConfig.excelColumnSubscribe.get(tableId));
	    logger.info("删除完毕");
	}
	/*
	 * 删除订阅规则
	 * 可以不删除发送结果
	 */
	public  boolean  deleteExcelSubscribe( String tableId)  {
		boolean result = false;
		try {
			//删除表
			result=excelDao.deleteExcelConfig(tableId);
			//删除字段
			result=columnDao.deleteExcelColumnSubscribe(tableId);
			
			//删除结果
			result=excelDao.dropSendExcelResult(tableId);
		} catch (Exception e) {
			e.printStackTrace();
			result = false;
		}
		return result;
	}
	/*
	 * 查看邮件发送结果
	 */
	public List<SendExcelResult> querySendExcelResult(String tableId){
		////logger.info("------------ querySendExcelResult- ------------");
		return InitExcelSubscribeConfig.sendExcelResultConfig.get(tableId);
	}
	
	/*
	 * 查看字段
	 */
	public List<ExcelColumnSubscribe> queryExcelColumnSubscribe(String tableId){
		logger.info("------查看字段------ queryExcelColumnSubscribe- ------------"+tableId);
		return InitExcelColumnSubscribeConfig.excelColumnSubscribe.get(tableId);
	}
	
	
}
